define([], (function load__dart_sdk() {
  'use strict';
  const _library = Object.create(null);
  const dart = Object.create(_library);
  dart.library = _library;
  var _debugger = Object.create(dart.library);
  var _foreign_helper = Object.create(dart.library);
  var _interceptors = Object.create(dart.library);
  var _internal = Object.create(dart.library);
  var _isolate_helper = Object.create(dart.library);
  var _js_helper = Object.create(dart.library);
  var _js_primitives = Object.create(dart.library);
  var _metadata = Object.create(dart.library);
  var _native_typed_data = Object.create(dart.library);
  var async = Object.create(dart.library);
  var collection = Object.create(dart.library);
  var convert = Object.create(dart.library);
  var developer = Object.create(dart.library);
  var io = Object.create(dart.library);
  var isolate$ = Object.create(dart.library);
  var js = Object.create(dart.library);
  var js_util = Object.create(dart.library);
  var math = Object.create(dart.library);
  var typed_data = Object.create(dart.library);
  var indexed_db = Object.create(dart.library);
  var html$ = Object.create(dart.library);
  var html_common = Object.create(dart.library);
  var svg$ = Object.create(dart.library);
  var web_audio = Object.create(dart.library);
  var web_gl = Object.create(dart.library);
  var web_sql = Object.create(dart.library);
  var core = Object.create(dart.library);
  var ui = Object.create(dart.library);
  var _engine = Object.create(dart.library);
  var _http = Object.create(dart.library);
  var _js_annotations = Object.create(dart.library);
  var dartx = Object.create(dart.library);
  const _privateNames = Symbol("_privateNames");
  dart.privateName = function(library, name) {
    let names = library[_privateNames];
    if (names == null) names = library[_privateNames] = new Map();
    let symbol = names.get(name);
    if (symbol == null) names.set(name, symbol = Symbol(name));
    return symbol;
  };
  var $hashCode = dartx.hashCode = Symbol("dartx.hashCode");
  var $isNotEmpty = dartx.isNotEmpty = Symbol("dartx.isNotEmpty");
  var $where = dartx.where = Symbol("dartx.where");
  var $join = dartx.join = Symbol("dartx.join");
  var $length = dartx.length = Symbol("dartx.length");
  var $_equals = dartx._equals = Symbol("dartx._equals");
  var $toString = dartx.toString = Symbol("dartx.toString");
  var $noSuchMethod = dartx.noSuchMethod = Symbol("dartx.noSuchMethod");
  var $cast = dartx.cast = Symbol("dartx.cast");
  var $addAll = dartx.addAll = Symbol("dartx.addAll");
  var $_set = dartx._set = Symbol("dartx._set");
  var $_get = dartx._get = Symbol("dartx._get");
  var $clear = dartx.clear = Symbol("dartx.clear");
  var $contains = dartx.contains = Symbol("dartx.contains");
  var $indexOf = dartx.indexOf = Symbol("dartx.indexOf");
  var $add = dartx.add = Symbol("dartx.add");
  var $isEmpty = dartx.isEmpty = Symbol("dartx.isEmpty");
  var $map = dartx.map = Symbol("dartx.map");
  var $toList = dartx.toList = Symbol("dartx.toList");
  var $sublist = dartx.sublist = Symbol("dartx.sublist");
  var $substring = dartx.substring = Symbol("dartx.substring");
  var $split = dartx.split = Symbol("dartx.split");
  var $trim = dartx.trim = Symbol("dartx.trim");
  var $runtimeType = dartx.runtimeType = Symbol("dartx.runtimeType");
  var $containsKey = dartx.containsKey = Symbol("dartx.containsKey");
  var $any = dartx.any = Symbol("dartx.any");
  var $keys = dartx.keys = Symbol("dartx.keys");
  var $remove = dartx.remove = Symbol("dartx.remove");
  var $values = dartx.values = Symbol("dartx.values");
  var $entries = dartx.entries = Symbol("dartx.entries");
  var $dartStack = dartx.dartStack = Symbol("dartx.dartStack");
  var $truncate = dartx.truncate = Symbol("dartx.truncate");
  var $toInt = dartx.toInt = Symbol("dartx.toInt");
  var $skip = dartx.skip = Symbol("dartx.skip");
  var $take = dartx.take = Symbol("dartx.take");
  var $asMap = dartx.asMap = Symbol("dartx.asMap");
  var $forEach = dartx.forEach = Symbol("dartx.forEach");
  var $elementAt = dartx.elementAt = Symbol("dartx.elementAt");
  var $last = dartx.last = Symbol("dartx.last");
  var $firstWhere = dartx.firstWhere = Symbol("dartx.firstWhere");
  var $replaceFirst = dartx.replaceFirst = Symbol("dartx.replaceFirst");
  var $startsWith = dartx.startsWith = Symbol("dartx.startsWith");
  var $compareTo = dartx.compareTo = Symbol("dartx.compareTo");
  var $sort = dartx.sort = Symbol("dartx.sort");
  var $putIfAbsent = dartx.putIfAbsent = Symbol("dartx.putIfAbsent");
  var $round = dartx.round = Symbol("dartx.round");
  var $bitAnd = dartx['&'] = Symbol("dartx.&");
  var $bitOr = dartx['|'] = Symbol("dartx.|");
  var $bitXor = dartx['^'] = Symbol("dartx.^");
  var $stackTrace = dartx.stackTrace = Symbol("dartx.stackTrace");
  var $invalidValue = dartx.invalidValue = Symbol("dartx.invalidValue");
  var $name = dartx.name = Symbol("dartx.name");
  var $message = dartx.message = Symbol("dartx.message");
  var $checkMutable = dartx.checkMutable = Symbol("dartx.checkMutable");
  var $checkGrowable = dartx.checkGrowable = Symbol("dartx.checkGrowable");
  var $removeAt = dartx.removeAt = Symbol("dartx.removeAt");
  var $insert = dartx.insert = Symbol("dartx.insert");
  var $setRange = dartx.setRange = Symbol("dartx.setRange");
  var $insertAll = dartx.insertAll = Symbol("dartx.insertAll");
  var $setAll = dartx.setAll = Symbol("dartx.setAll");
  var $removeLast = dartx.removeLast = Symbol("dartx.removeLast");
  var $removeWhere = dartx.removeWhere = Symbol("dartx.removeWhere");
  var $retainWhere = dartx.retainWhere = Symbol("dartx.retainWhere");
  var $expand = dartx.expand = Symbol("dartx.expand");
  var $takeWhile = dartx.takeWhile = Symbol("dartx.takeWhile");
  var $skipWhile = dartx.skipWhile = Symbol("dartx.skipWhile");
  var $reduce = dartx.reduce = Symbol("dartx.reduce");
  var $fold = dartx.fold = Symbol("dartx.fold");
  var $lastWhere = dartx.lastWhere = Symbol("dartx.lastWhere");
  var $singleWhere = dartx.singleWhere = Symbol("dartx.singleWhere");
  var $getRange = dartx.getRange = Symbol("dartx.getRange");
  var $first = dartx.first = Symbol("dartx.first");
  var $single = dartx.single = Symbol("dartx.single");
  var $removeRange = dartx.removeRange = Symbol("dartx.removeRange");
  var $fillRange = dartx.fillRange = Symbol("dartx.fillRange");
  var $replaceRange = dartx.replaceRange = Symbol("dartx.replaceRange");
  var $every = dartx.every = Symbol("dartx.every");
  var $reversed = dartx.reversed = Symbol("dartx.reversed");
  var $shuffle = dartx.shuffle = Symbol("dartx.shuffle");
  var $lastIndexOf = dartx.lastIndexOf = Symbol("dartx.lastIndexOf");
  var $toSet = dartx.toSet = Symbol("dartx.toSet");
  var $iterator = dartx.iterator = Symbol("dartx.iterator");
  var $followedBy = dartx.followedBy = Symbol("dartx.followedBy");
  var $whereType = dartx.whereType = Symbol("dartx.whereType");
  var $plus = dartx['+'] = Symbol("dartx.+");
  var $indexWhere = dartx.indexWhere = Symbol("dartx.indexWhere");
  var $lastIndexWhere = dartx.lastIndexWhere = Symbol("dartx.lastIndexWhere");
  var $isNegative = dartx.isNegative = Symbol("dartx.isNegative");
  var $isNaN = dartx.isNaN = Symbol("dartx.isNaN");
  var $isInfinite = dartx.isInfinite = Symbol("dartx.isInfinite");
  var $isFinite = dartx.isFinite = Symbol("dartx.isFinite");
  var $remainder = dartx.remainder = Symbol("dartx.remainder");
  var $abs = dartx.abs = Symbol("dartx.abs");
  var $sign = dartx.sign = Symbol("dartx.sign");
  var $truncateToDouble = dartx.truncateToDouble = Symbol("dartx.truncateToDouble");
  var $ceilToDouble = dartx.ceilToDouble = Symbol("dartx.ceilToDouble");
  var $ceil = dartx.ceil = Symbol("dartx.ceil");
  var $floorToDouble = dartx.floorToDouble = Symbol("dartx.floorToDouble");
  var $floor = dartx.floor = Symbol("dartx.floor");
  var $roundToDouble = dartx.roundToDouble = Symbol("dartx.roundToDouble");
  var $clamp = dartx.clamp = Symbol("dartx.clamp");
  var $toDouble = dartx.toDouble = Symbol("dartx.toDouble");
  var $toStringAsFixed = dartx.toStringAsFixed = Symbol("dartx.toStringAsFixed");
  var $toStringAsExponential = dartx.toStringAsExponential = Symbol("dartx.toStringAsExponential");
  var $toStringAsPrecision = dartx.toStringAsPrecision = Symbol("dartx.toStringAsPrecision");
  var $codeUnitAt = dartx.codeUnitAt = Symbol("dartx.codeUnitAt");
  var $toRadixString = dartx.toRadixString = Symbol("dartx.toRadixString");
  var $times = dartx['*'] = Symbol("dartx.*");
  var $_negate = dartx._negate = Symbol("dartx._negate");
  var $minus = dartx['-'] = Symbol("dartx.-");
  var $divide = dartx['/'] = Symbol("dartx./");
  var $modulo = dartx['%'] = Symbol("dartx.%");
  var $floorDivide = dartx['~/'] = Symbol("dartx.~/");
  var $leftShift = dartx['<<'] = Symbol("dartx.<<");
  var $rightShift = dartx['>>'] = Symbol("dartx.>>");
  var $lessThan = dartx['<'] = Symbol("dartx.<");
  var $greaterThan = dartx['>'] = Symbol("dartx.>");
  var $lessOrEquals = dartx['<='] = Symbol("dartx.<=");
  var $greaterOrEquals = dartx['>='] = Symbol("dartx.>=");
  var $isEven = dartx.isEven = Symbol("dartx.isEven");
  var $isOdd = dartx.isOdd = Symbol("dartx.isOdd");
  var $toUnsigned = dartx.toUnsigned = Symbol("dartx.toUnsigned");
  var $toSigned = dartx.toSigned = Symbol("dartx.toSigned");
  var $bitLength = dartx.bitLength = Symbol("dartx.bitLength");
  var $modPow = dartx.modPow = Symbol("dartx.modPow");
  var $modInverse = dartx.modInverse = Symbol("dartx.modInverse");
  var $gcd = dartx.gcd = Symbol("dartx.gcd");
  var $bitNot = dartx['~'] = Symbol("dartx.~");
  var $allMatches = dartx.allMatches = Symbol("dartx.allMatches");
  var $matchAsPrefix = dartx.matchAsPrefix = Symbol("dartx.matchAsPrefix");
  var $endsWith = dartx.endsWith = Symbol("dartx.endsWith");
  var $replaceAll = dartx.replaceAll = Symbol("dartx.replaceAll");
  var $splitMapJoin = dartx.splitMapJoin = Symbol("dartx.splitMapJoin");
  var $replaceAllMapped = dartx.replaceAllMapped = Symbol("dartx.replaceAllMapped");
  var $replaceFirstMapped = dartx.replaceFirstMapped = Symbol("dartx.replaceFirstMapped");
  var $toLowerCase = dartx.toLowerCase = Symbol("dartx.toLowerCase");
  var $toUpperCase = dartx.toUpperCase = Symbol("dartx.toUpperCase");
  var $trimLeft = dartx.trimLeft = Symbol("dartx.trimLeft");
  var $trimRight = dartx.trimRight = Symbol("dartx.trimRight");
  var $padLeft = dartx.padLeft = Symbol("dartx.padLeft");
  var $padRight = dartx.padRight = Symbol("dartx.padRight");
  var $codeUnits = dartx.codeUnits = Symbol("dartx.codeUnits");
  var $runes = dartx.runes = Symbol("dartx.runes");
  var $buffer = dartx.buffer = Symbol("dartx.buffer");
  var $offsetInBytes = dartx.offsetInBytes = Symbol("dartx.offsetInBytes");
  var $containsValue = dartx.containsValue = Symbol("dartx.containsValue");
  var $update = dartx.update = Symbol("dartx.update");
  var $updateAll = dartx.updateAll = Symbol("dartx.updateAll");
  var $addEntries = dartx.addEntries = Symbol("dartx.addEntries");
  var $lengthInBytes = dartx.lengthInBytes = Symbol("dartx.lengthInBytes");
  var $asUint8List = dartx.asUint8List = Symbol("dartx.asUint8List");
  var $asInt8List = dartx.asInt8List = Symbol("dartx.asInt8List");
  var $asUint8ClampedList = dartx.asUint8ClampedList = Symbol("dartx.asUint8ClampedList");
  var $asUint16List = dartx.asUint16List = Symbol("dartx.asUint16List");
  var $asInt16List = dartx.asInt16List = Symbol("dartx.asInt16List");
  var $asUint32List = dartx.asUint32List = Symbol("dartx.asUint32List");
  var $asInt32List = dartx.asInt32List = Symbol("dartx.asInt32List");
  var $asUint64List = dartx.asUint64List = Symbol("dartx.asUint64List");
  var $asInt64List = dartx.asInt64List = Symbol("dartx.asInt64List");
  var $asInt32x4List = dartx.asInt32x4List = Symbol("dartx.asInt32x4List");
  var $asFloat32List = dartx.asFloat32List = Symbol("dartx.asFloat32List");
  var $asFloat64List = dartx.asFloat64List = Symbol("dartx.asFloat64List");
  var $asFloat32x4List = dartx.asFloat32x4List = Symbol("dartx.asFloat32x4List");
  var $asFloat64x2List = dartx.asFloat64x2List = Symbol("dartx.asFloat64x2List");
  var $asByteData = dartx.asByteData = Symbol("dartx.asByteData");
  var $elementSizeInBytes = dartx.elementSizeInBytes = Symbol("dartx.elementSizeInBytes");
  var $getFloat32 = dartx.getFloat32 = Symbol("dartx.getFloat32");
  var $getFloat64 = dartx.getFloat64 = Symbol("dartx.getFloat64");
  var $getInt16 = dartx.getInt16 = Symbol("dartx.getInt16");
  var $getInt32 = dartx.getInt32 = Symbol("dartx.getInt32");
  var $getInt64 = dartx.getInt64 = Symbol("dartx.getInt64");
  var $getInt8 = dartx.getInt8 = Symbol("dartx.getInt8");
  var $getUint16 = dartx.getUint16 = Symbol("dartx.getUint16");
  var $getUint32 = dartx.getUint32 = Symbol("dartx.getUint32");
  var $getUint64 = dartx.getUint64 = Symbol("dartx.getUint64");
  var $getUint8 = dartx.getUint8 = Symbol("dartx.getUint8");
  var $setFloat32 = dartx.setFloat32 = Symbol("dartx.setFloat32");
  var $setFloat64 = dartx.setFloat64 = Symbol("dartx.setFloat64");
  var $setInt16 = dartx.setInt16 = Symbol("dartx.setInt16");
  var $setInt32 = dartx.setInt32 = Symbol("dartx.setInt32");
  var $setInt64 = dartx.setInt64 = Symbol("dartx.setInt64");
  var $setInt8 = dartx.setInt8 = Symbol("dartx.setInt8");
  var $setUint16 = dartx.setUint16 = Symbol("dartx.setUint16");
  var $setUint32 = dartx.setUint32 = Symbol("dartx.setUint32");
  var $setUint64 = dartx.setUint64 = Symbol("dartx.setUint64");
  var $setUint8 = dartx.setUint8 = Symbol("dartx.setUint8");
  var $left = dartx.left = Symbol("dartx.left");
  var $width = dartx.width = Symbol("dartx.width");
  var $top = dartx.top = Symbol("dartx.top");
  var $height = dartx.height = Symbol("dartx.height");
  var $right = dartx.right = Symbol("dartx.right");
  var $bottom = dartx.bottom = Symbol("dartx.bottom");
  var $intersection = dartx.intersection = Symbol("dartx.intersection");
  var $intersects = dartx.intersects = Symbol("dartx.intersects");
  var $boundingBox = dartx.boundingBox = Symbol("dartx.boundingBox");
  var $containsRectangle = dartx.containsRectangle = Symbol("dartx.containsRectangle");
  var $containsPoint = dartx.containsPoint = Symbol("dartx.containsPoint");
  var $topLeft = dartx.topLeft = Symbol("dartx.topLeft");
  var $topRight = dartx.topRight = Symbol("dartx.topRight");
  var $bottomRight = dartx.bottomRight = Symbol("dartx.bottomRight");
  var $bottomLeft = dartx.bottomLeft = Symbol("dartx.bottomLeft");
  var T$ = {
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ListOfObjectN: () => (T$.ListOfObjectN = dart.constFn(core.List$(T$.ObjectN())))(),
    boolN: () => (T$.boolN = dart.constFn(dart.nullable(core.bool)))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    IdentityMapOfString$ObjectN: () => (T$.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ObjectN())))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListNOfString: () => (T$.ListNOfString = dart.constFn(dart.nullable(T$.ListOfString())))(),
    IdentityMapOfString$ListNOfString: () => (T$.IdentityMapOfString$ListNOfString = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListNOfString())))(),
    JSArrayOfTypeVariable: () => (T$.JSArrayOfTypeVariable = dart.constFn(_interceptors.JSArray$(dart.TypeVariable)))(),
    ExpandoOfFunction: () => (T$.ExpandoOfFunction = dart.constFn(core.Expando$(core.Function)))(),
    IdentityMapOfString$Object: () => (T$.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    ListOfObject: () => (T$.ListOfObject = dart.constFn(core.List$(core.Object)))(),
    IdentityMapOfTypeVariable$int: () => (T$.IdentityMapOfTypeVariable$int = dart.constFn(_js_helper.IdentityMap$(dart.TypeVariable, core.int)))(),
    IdentityMapOfTypeVariable$Object: () => (T$.IdentityMapOfTypeVariable$Object = dart.constFn(_js_helper.IdentityMap$(dart.TypeVariable, core.Object)))(),
    LinkedHashMapOfTypeVariable$TypeConstraint: () => (T$.LinkedHashMapOfTypeVariable$TypeConstraint = dart.constFn(collection.LinkedHashMap$(dart.TypeVariable, dart.TypeConstraint)))(),
    JSArrayOfObject: () => (T$.JSArrayOfObject = dart.constFn(_interceptors.JSArray$(core.Object)))(),
    ListOfType: () => (T$.ListOfType = dart.constFn(core.List$(core.Type)))(),
    SymbolL: () => (T$.SymbolL = dart.constFn(dart.legacy(core.Symbol)))(),
    MapOfSymbol$dynamic: () => (T$.MapOfSymbol$dynamic = dart.constFn(core.Map$(core.Symbol, dart.dynamic)))(),
    TypeL: () => (T$.TypeL = dart.constFn(dart.legacy(core.Type)))(),
    JSArrayOfNameValuePair: () => (T$.JSArrayOfNameValuePair = dart.constFn(_interceptors.JSArray$(_debugger.NameValuePair)))(),
    intAnddynamicTovoid: () => (T$.intAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.int, dart.dynamic])))(),
    JSArrayOfFormatter: () => (T$.JSArrayOfFormatter = dart.constFn(_interceptors.JSArray$(_debugger.Formatter)))(),
    _HashSetOfNameValuePair: () => (T$._HashSetOfNameValuePair = dart.constFn(collection._HashSet$(_debugger.NameValuePair)))(),
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    dynamicAnddynamicToNull: () => (T$.dynamicAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, dart.dynamic])))(),
    dynamicAnddynamicTovoid: () => (T$.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))(),
    dynamicToString: () => (T$.dynamicToString = dart.constFn(dart.fnType(core.String, [dart.dynamic])))(),
    ListOfNameValuePair: () => (T$.ListOfNameValuePair = dart.constFn(core.List$(_debugger.NameValuePair)))(),
    StringTobool: () => (T$.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    VoidToString: () => (T$.VoidToString = dart.constFn(dart.fnType(core.String, [])))(),
    StringToNameValuePair: () => (T$.StringToNameValuePair = dart.constFn(dart.fnType(_debugger.NameValuePair, [core.String])))(),
    NameValuePairAndNameValuePairToint: () => (T$.NameValuePairAndNameValuePairToint = dart.constFn(dart.fnType(core.int, [_debugger.NameValuePair, _debugger.NameValuePair])))(),
    LinkedHashMapOfdynamic$ObjectN: () => (T$.LinkedHashMapOfdynamic$ObjectN = dart.constFn(collection.LinkedHashMap$(dart.dynamic, T$.ObjectN())))(),
    dynamicTodynamic: () => (T$.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    dynamicToObjectN: () => (T$.dynamicToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [dart.dynamic])))(),
    IdentityMapOfString$_MethodStats: () => (T$.IdentityMapOfString$_MethodStats = dart.constFn(_js_helper.IdentityMap$(core.String, _debugger._MethodStats)))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    VoidTo_MethodStats: () => (T$.VoidTo_MethodStats = dart.constFn(dart.fnType(_debugger._MethodStats, [])))(),
    StringAndStringToint: () => (T$.StringAndStringToint = dart.constFn(dart.fnType(core.int, [core.String, core.String])))(),
    JSArrayOfListOfObject: () => (T$.JSArrayOfListOfObject = dart.constFn(_interceptors.JSArray$(T$.ListOfObject())))(),
    JSArrayOf_CallMethodRecord: () => (T$.JSArrayOf_CallMethodRecord = dart.constFn(_interceptors.JSArray$(_debugger._CallMethodRecord)))(),
    ListN: () => (T$.ListN = dart.constFn(dart.nullable(core.List)))(),
    InvocationN: () => (T$.InvocationN = dart.constFn(dart.nullable(core.Invocation)))(),
    MapNOfSymbol$dynamic: () => (T$.MapNOfSymbol$dynamic = dart.constFn(dart.nullable(T$.MapOfSymbol$dynamic())))(),
    ObjectNAndObjectNToint: () => (T$.ObjectNAndObjectNToint = dart.constFn(dart.fnType(core.int, [T$.ObjectN(), T$.ObjectN()])))(),
    dynamicAnddynamicToint: () => (T$.dynamicAnddynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic, dart.dynamic])))(),
    ObjectAndStackTraceTovoid: () => (T$.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    _FutureOfNull: () => (T$._FutureOfNull = dart.constFn(async._Future$(core.Null)))(),
    VoidTo_FutureOfNull: () => (T$.VoidTo_FutureOfNull = dart.constFn(dart.fnType(T$._FutureOfNull(), [])))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    FutureNOfNull: () => (T$.FutureNOfNull = dart.constFn(dart.nullable(T$.FutureOfNull())))(),
    dynamicToFuture: () => (T$.dynamicToFuture = dart.constFn(dart.fnType(async.Future, [dart.dynamic])))(),
    _FutureOfString: () => (T$._FutureOfString = dart.constFn(async._Future$(core.String)))(),
    _FutureOfbool: () => (T$._FutureOfbool = dart.constFn(async._Future$(core.bool)))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    boolToNull: () => (T$.boolToNull = dart.constFn(dart.fnType(core.Null, [core.bool])))(),
    voidToNull: () => (T$.voidToNull = dart.constFn(dart.fnType(core.Null, [dart.void])))(),
    _FutureOfint: () => (T$._FutureOfint = dart.constFn(async._Future$(core.int)))(),
    ObjectAndStackTraceToNull: () => (T$.ObjectAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [core.Object, core.StackTrace])))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [])))(),
    ObjectTovoid: () => (T$.ObjectTovoid = dart.constFn(dart.fnType(dart.void, [core.Object])))(),
    EventSinkTo_ConverterStreamEventSink: () => (T$.EventSinkTo_ConverterStreamEventSink = dart.constFn(dart.fnType(convert._ConverterStreamEventSink, [async.EventSink])))(),
    JSArrayOfUint8List: () => (T$.JSArrayOfUint8List = dart.constFn(_interceptors.JSArray$(typed_data.Uint8List)))(),
    ObjectNAndObjectNTovoid: () => (T$.ObjectNAndObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectN(), T$.ObjectN()])))(),
    ObjectNToObjectN: () => (T$.ObjectNToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [T$.ObjectN()])))(),
    EmptyIteratorOfNeverL: () => (T$.EmptyIteratorOfNeverL = dart.constFn(_internal.EmptyIterator$(dart.legacy(dart.Never))))(),
    doubleL: () => (T$.doubleL = dart.constFn(dart.legacy(core.double)))(),
    VoidToFutureOfNull: () => (T$.VoidToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    VoidToint: () => (T$.VoidToint = dart.constFn(dart.fnType(core.int, [])))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    JSArrayOfStringN: () => (T$.JSArrayOfStringN = dart.constFn(_interceptors.JSArray$(T$.StringN())))(),
    SubListIterableOfString: () => (T$.SubListIterableOfString = dart.constFn(_internal.SubListIterable$(core.String)))(),
    EmptyIterableOfString: () => (T$.EmptyIterableOfString = dart.constFn(_internal.EmptyIterable$(core.String)))(),
    ObjectNTovoid: () => (T$.ObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectN()])))(),
    MatchToString: () => (T$.MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))(),
    IterableOfdouble: () => (T$.IterableOfdouble = dart.constFn(core.Iterable$(core.double)))(),
    IterableOfint: () => (T$.IterableOfint = dart.constFn(core.Iterable$(core.int)))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    ObjectNTovoid$1: () => (T$.ObjectNTovoid$1 = dart.constFn(dart.fnType(dart.void, [], [T$.ObjectN()])))(),
    _FutureOfObjectN: () => (T$._FutureOfObjectN = dart.constFn(async._Future$(T$.ObjectN())))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    _FutureOfvoid: () => (T$._FutureOfvoid = dart.constFn(async._Future$(dart.void)))(),
    VoidToObject: () => (T$.VoidToObject = dart.constFn(dart.fnType(core.Object, [])))(),
    ObjectTodynamic: () => (T$.ObjectTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Object])))(),
    VoidToStackTrace: () => (T$.VoidToStackTrace = dart.constFn(dart.fnType(core.StackTrace, [])))(),
    StackTraceTodynamic: () => (T$.StackTraceTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.StackTrace])))(),
    ObjectNTobool: () => (T$.ObjectNTobool = dart.constFn(dart.fnType(core.bool, [T$.ObjectN()])))(),
    FutureOrOfbool: () => (T$.FutureOrOfbool = dart.constFn(async.FutureOr$(core.bool)))(),
    VoidToFutureOrOfbool: () => (T$.VoidToFutureOrOfbool = dart.constFn(dart.fnType(T$.FutureOrOfbool(), [])))(),
    boolTovoid: () => (T$.boolTovoid = dart.constFn(dart.fnType(dart.void, [core.bool])))(),
    VoidToFn: () => (T$.VoidToFn = dart.constFn(dart.fnType(T$.boolTovoid(), [])))(),
    FnTodynamic: () => (T$.FnTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.boolTovoid()])))(),
    FutureOfbool: () => (T$.FutureOfbool = dart.constFn(async.Future$(core.bool)))(),
    ObjectTobool: () => (T$.ObjectTobool = dart.constFn(dart.fnType(core.bool, [core.Object])))(),
    VoidTodynamic: () => (T$.VoidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [])))(),
    ObjectAndStackTraceTodynamic: () => (T$.ObjectAndStackTraceTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Object, core.StackTrace])))(),
    _FutureListenerOfObject$Object: () => (T$._FutureListenerOfObject$Object = dart.constFn(async._FutureListener$(core.Object, core.Object)))(),
    _FutureListenerNOfObject$Object: () => (T$._FutureListenerNOfObject$Object = dart.constFn(dart.nullable(T$._FutureListenerOfObject$Object())))(),
    JSArrayOfFunction: () => (T$.JSArrayOfFunction = dart.constFn(_interceptors.JSArray$(core.Function)))(),
    _FutureListenerN: () => (T$._FutureListenerN = dart.constFn(dart.nullable(async._FutureListener)))(),
    dynamicTo_Future: () => (T$.dynamicTo_Future = dart.constFn(dart.fnType(async._Future, [dart.dynamic])))(),
    _StreamControllerAddStreamStateOfObjectN: () => (T$._StreamControllerAddStreamStateOfObjectN = dart.constFn(async._StreamControllerAddStreamState$(T$.ObjectN())))(),
    FunctionN: () => (T$.FunctionN = dart.constFn(dart.nullable(core.Function)))(),
    AsyncErrorN: () => (T$.AsyncErrorN = dart.constFn(dart.nullable(async.AsyncError)))(),
    StackTraceN: () => (T$.StackTraceN = dart.constFn(dart.nullable(core.StackTrace)))(),
    ZoneAndZoneDelegateAndZone__ToAsyncErrorN: () => (T$.ZoneAndZoneDelegateAndZone__ToAsyncErrorN = dart.constFn(dart.fnType(T$.AsyncErrorN(), [async.Zone, async.ZoneDelegate, async.Zone, core.Object, T$.StackTraceN()])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToAsyncErrorN: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToAsyncErrorN = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__ToAsyncErrorN())))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, T$.VoidTovoid()])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__Tovoid())))(),
    ZoneAndZoneDelegateAndZone__ToTimer: () => (T$.ZoneAndZoneDelegateAndZone__ToTimer = dart.constFn(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, T$.VoidTovoid()])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__ToTimer())))(),
    TimerTovoid: () => (T$.TimerTovoid = dart.constFn(dart.fnType(dart.void, [async.Timer])))(),
    ZoneAndZoneDelegateAndZone__ToTimer$1: () => (T$.ZoneAndZoneDelegateAndZone__ToTimer$1 = dart.constFn(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, T$.TimerTovoid()])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer$1: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer$1 = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__ToTimer$1())))(),
    ZoneAndZoneDelegateAndZone__Tovoid$1: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid$1 = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$1: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$1 = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__Tovoid$1())))(),
    ZoneSpecificationN: () => (T$.ZoneSpecificationN = dart.constFn(dart.nullable(async.ZoneSpecification)))(),
    MapOfObjectN$ObjectN: () => (T$.MapOfObjectN$ObjectN = dart.constFn(core.Map$(T$.ObjectN(), T$.ObjectN())))(),
    MapNOfObjectN$ObjectN: () => (T$.MapNOfObjectN$ObjectN = dart.constFn(dart.nullable(T$.MapOfObjectN$ObjectN())))(),
    ZoneAndZoneDelegateAndZone__ToZone: () => (T$.ZoneAndZoneDelegateAndZone__ToZone = dart.constFn(dart.fnType(async.Zone, [async.Zone, async.ZoneDelegate, async.Zone, T$.ZoneSpecificationN(), T$.MapNOfObjectN$ObjectN()])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToZone: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToZone = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__ToZone())))(),
    ZoneAndZoneDelegateAndZone__Tovoid$2: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid$2 = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$2: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$2 = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__Tovoid$2())))(),
    ZoneN: () => (T$.ZoneN = dart.constFn(dart.nullable(async.Zone)))(),
    ZoneDelegateN: () => (T$.ZoneDelegateN = dart.constFn(dart.nullable(async.ZoneDelegate)))(),
    ZoneNAndZoneDelegateNAndZone__ToR: () => (T$.ZoneNAndZoneDelegateNAndZone__ToR = dart.constFn(dart.gFnType(R => [R, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, dart.fnType(R, [])]], R => [T$.ObjectN()])))(),
    ZoneNAndZoneDelegateNAndZone__ToR$1: () => (T$.ZoneNAndZoneDelegateNAndZone__ToR$1 = dart.constFn(dart.gFnType((R, T) => [R, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, dart.fnType(R, [T]), T]], (R, T) => [T$.ObjectN(), T$.ObjectN()])))(),
    ZoneNAndZoneDelegateNAndZone__ToR$2: () => (T$.ZoneNAndZoneDelegateNAndZone__ToR$2 = dart.constFn(dart.gFnType((R, T1, T2) => [R, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, dart.fnType(R, [T1, T2]), T1, T2]], (R, T1, T2) => [T$.ObjectN(), T$.ObjectN(), T$.ObjectN()])))(),
    ZoneAndZoneDelegateAndZone__ToFn: () => (T$.ZoneAndZoneDelegateAndZone__ToFn = dart.constFn(dart.gFnType(R => [dart.fnType(R, []), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [])]], R => [T$.ObjectN()])))(),
    ZoneAndZoneDelegateAndZone__ToFn$1: () => (T$.ZoneAndZoneDelegateAndZone__ToFn$1 = dart.constFn(dart.gFnType((R, T) => [dart.fnType(R, [T]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T])]], (R, T) => [T$.ObjectN(), T$.ObjectN()])))(),
    ZoneAndZoneDelegateAndZone__ToFn$2: () => (T$.ZoneAndZoneDelegateAndZone__ToFn$2 = dart.constFn(dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T1, T2])]], (R, T1, T2) => [T$.ObjectN(), T$.ObjectN(), T$.ObjectN()])))(),
    ZoneL: () => (T$.ZoneL = dart.constFn(dart.legacy(async.Zone)))(),
    ZoneDelegateL: () => (T$.ZoneDelegateL = dart.constFn(dart.legacy(async.ZoneDelegate)))(),
    ObjectL: () => (T$.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    ZoneLAndZoneDelegateLAndZoneL__ToAsyncErrorN: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToAsyncErrorN = dart.constFn(dart.fnType(T$.AsyncErrorN(), [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.ObjectL(), T$.StackTraceN()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__ToAsyncErrorN())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN())))(),
    VoidToLvoid: () => (T$.VoidToLvoid = dart.constFn(dart.legacy(T$.VoidTovoid())))(),
    ZoneLAndZoneDelegateLAndZoneL__Tovoid: () => (T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid = dart.constFn(dart.fnType(dart.void, [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.VoidToLvoid()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLvoid: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid())))(),
    ZoneNAndZoneDelegateNAndZone__Tovoid: () => (T$.ZoneNAndZoneDelegateNAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, T$.VoidTovoid()])))(),
    TimerL: () => (T$.TimerL = dart.constFn(dart.legacy(async.Timer)))(),
    DurationL: () => (T$.DurationL = dart.constFn(dart.legacy(core.Duration)))(),
    ZoneLAndZoneDelegateLAndZoneL__ToTimerL: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToTimerL = dart.constFn(dart.fnType(T$.TimerL(), [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.DurationL(), T$.VoidToLvoid()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLTimerL: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLTimerL = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__ToTimerL())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLTimerL())))(),
    TimerLTovoid: () => (T$.TimerLTovoid = dart.constFn(dart.fnType(dart.void, [T$.TimerL()])))(),
    TimerLToLvoid: () => (T$.TimerLToLvoid = dart.constFn(dart.legacy(T$.TimerLTovoid())))(),
    ZoneLAndZoneDelegateLAndZoneL__ToTimerL$1: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToTimerL$1 = dart.constFn(dart.fnType(T$.TimerL(), [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.DurationL(), T$.TimerLToLvoid()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1 = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__ToTimerL$1())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1 = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1())))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    ZoneLAndZoneDelegateLAndZoneL__Tovoid$1: () => (T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid$1 = dart.constFn(dart.fnType(dart.void, [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.StringL()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLvoid$1: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid$1 = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid$1())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$1: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$1 = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid$1())))(),
    ZoneLAndZoneDelegateLAndZoneL__ToZoneL: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToZoneL = dart.constFn(dart.fnType(T$.ZoneL(), [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.ZoneSpecificationN(), T$.MapNOfObjectN$ObjectN()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLZoneL: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLZoneL = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__ToZoneL())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLZoneL: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLZoneL = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLZoneL())))(),
    ZoneNAndZoneDelegateNAndZone__ToZone: () => (T$.ZoneNAndZoneDelegateNAndZone__ToZone = dart.constFn(dart.fnType(async.Zone, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, T$.ZoneSpecificationN(), T$.MapNOfObjectN$ObjectN()])))(),
    StackTraceL: () => (T$.StackTraceL = dart.constFn(dart.legacy(core.StackTrace)))(),
    ZoneLAndZoneDelegateLAndZoneL__Tovoid$2: () => (T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid$2 = dart.constFn(dart.fnType(dart.void, [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.ObjectL(), T$.StackTraceL()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLvoid$2: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid$2 = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid$2())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$2: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$2 = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid$2())))(),
    ZoneNAndZoneDelegateNAndZone__Tovoid$1: () => (T$.ZoneNAndZoneDelegateNAndZone__Tovoid$1 = dart.constFn(dart.fnType(dart.void, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, core.Object, core.StackTrace])))(),
    NeverAndNeverTodynamic: () => (T$.NeverAndNeverTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.Never, dart.Never])))(),
    StringTovoid: () => (T$.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    HashMapOfObjectN$ObjectN: () => (T$.HashMapOfObjectN$ObjectN = dart.constFn(collection.HashMap$(T$.ObjectN(), T$.ObjectN())))(),
    JSArrayOfObjectN: () => (T$.JSArrayOfObjectN = dart.constFn(_interceptors.JSArray$(T$.ObjectN())))(),
    ObjectNToint: () => (T$.ObjectNToint = dart.constFn(dart.fnType(core.int, [T$.ObjectN()])))(),
    ObjectNAndObjectNTobool: () => (T$.ObjectNAndObjectNTobool = dart.constFn(dart.fnType(core.bool, [T$.ObjectN(), T$.ObjectN()])))(),
    LinkedListEntryOfLinkedListEntry: () => (T$.LinkedListEntryOfLinkedListEntry = dart.constFn(collection.LinkedListEntry$(collection.LinkedListEntry)))()
  };
  var T$0 = {
    dynamicTobool: () => (T$0.dynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic])))(),
    ComparableAndComparableToint: () => (T$0.ComparableAndComparableToint = dart.constFn(dart.fnType(core.int, [core.Comparable, core.Comparable])))(),
    MappedIterableOfString$dynamic: () => (T$0.MappedIterableOfString$dynamic = dart.constFn(_internal.MappedIterable$(core.String, dart.dynamic)))(),
    ObjectNTodynamic: () => (T$0.ObjectNTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.ObjectN()])))(),
    MapOfString$dynamic: () => (T$0.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    StringAnddynamicTovoid: () => (T$0.StringAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.String, dart.dynamic])))(),
    IdentityMapOfString$dynamic: () => (T$0.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    ListOfint: () => (T$0.ListOfint = dart.constFn(core.List$(core.int)))(),
    StringBufferAndStringToStringBuffer: () => (T$0.StringBufferAndStringToStringBuffer = dart.constFn(dart.fnType(core.StringBuffer, [core.StringBuffer, core.String])))(),
    StringBufferToString: () => (T$0.StringBufferToString = dart.constFn(dart.fnType(core.String, [core.StringBuffer])))(),
    IdentityMapOfString$Encoding: () => (T$0.IdentityMapOfString$Encoding = dart.constFn(_js_helper.IdentityMap$(core.String, convert.Encoding)))(),
    SinkOfListOfint: () => (T$0.SinkOfListOfint = dart.constFn(core.Sink$(T$0.ListOfint())))(),
    StreamOfString: () => (T$0.StreamOfString = dart.constFn(async.Stream$(core.String)))(),
    StreamOfListOfint: () => (T$0.StreamOfListOfint = dart.constFn(async.Stream$(T$0.ListOfint())))(),
    SinkOfString: () => (T$0.SinkOfString = dart.constFn(core.Sink$(core.String)))(),
    intL: () => (T$0.intL = dart.constFn(dart.legacy(core.int)))(),
    StreamOfObjectN: () => (T$0.StreamOfObjectN = dart.constFn(async.Stream$(T$.ObjectN())))(),
    JSArrayOfListOfint: () => (T$0.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T$0.ListOfint())))(),
    Uint8ListAndintAndintTovoid: () => (T$0.Uint8ListAndintAndintTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.Uint8List, core.int, core.int])))(),
    SyncIterableOfString: () => (T$0.SyncIterableOfString = dart.constFn(_js_helper.SyncIterable$(core.String)))(),
    EventSinkOfString: () => (T$0.EventSinkOfString = dart.constFn(async.EventSink$(core.String)))(),
    EventSinkOfStringTo_LineSplitterEventSink: () => (T$0.EventSinkOfStringTo_LineSplitterEventSink = dart.constFn(dart.fnType(convert._LineSplitterEventSink, [T$0.EventSinkOfString()])))(),
    VoidToObjectN: () => (T$0.VoidToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [])))(),
    IdentityMapOfString$_FakeUserTag: () => (T$0.IdentityMapOfString$_FakeUserTag = dart.constFn(_js_helper.IdentityMap$(core.String, developer._FakeUserTag)))(),
    LinkedMapOfString$Metric: () => (T$0.LinkedMapOfString$Metric = dart.constFn(_js_helper.LinkedMap$(core.String, developer.Metric)))(),
    UriN: () => (T$0.UriN = dart.constFn(dart.nullable(core.Uri)))(),
    CompleterOfUriN: () => (T$0.CompleterOfUriN = dart.constFn(async.Completer$(T$0.UriN())))(),
    UriNTovoid: () => (T$0.UriNTovoid = dart.constFn(dart.fnType(dart.void, [T$0.UriN()])))(),
    CompleterOfUri: () => (T$0.CompleterOfUri = dart.constFn(async.Completer$(core.Uri)))(),
    UriTovoid: () => (T$0.UriTovoid = dart.constFn(dart.fnType(dart.void, [core.Uri])))(),
    _SyncBlockN: () => (T$0._SyncBlockN = dart.constFn(dart.nullable(developer._SyncBlock)))(),
    JSArrayOf_SyncBlockN: () => (T$0.JSArrayOf_SyncBlockN = dart.constFn(_interceptors.JSArray$(T$0._SyncBlockN())))(),
    JSArrayOf_AsyncBlock: () => (T$0.JSArrayOf_AsyncBlock = dart.constFn(_interceptors.JSArray$(developer._AsyncBlock)))(),
    LinkedMapOfObjectN$ObjectN: () => (T$0.LinkedMapOfObjectN$ObjectN = dart.constFn(_js_helper.LinkedMap$(T$.ObjectN(), T$.ObjectN())))(),
    FutureOfServiceExtensionResponse: () => (T$0.FutureOfServiceExtensionResponse = dart.constFn(async.Future$(developer.ServiceExtensionResponse)))(),
    MapOfString$String: () => (T$0.MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))(),
    StringAndMapOfString$StringToFutureOfServiceExtensionResponse: () => (T$0.StringAndMapOfString$StringToFutureOfServiceExtensionResponse = dart.constFn(dart.fnType(T$0.FutureOfServiceExtensionResponse(), [core.String, T$0.MapOfString$String()])))(),
    IdentityMapOfString$StringAndMapOfString$StringToFutureOfServiceExtensionResponse: () => (T$0.IdentityMapOfString$StringAndMapOfString$StringToFutureOfServiceExtensionResponse = dart.constFn(_js_helper.IdentityMap$(core.String, T$0.StringAndMapOfString$StringToFutureOfServiceExtensionResponse())))(),
    VoidToUint8List: () => (T$0.VoidToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [])))(),
    Uint8ListTodynamic: () => (T$0.Uint8ListTodynamic = dart.constFn(dart.fnType(dart.dynamic, [typed_data.Uint8List])))(),
    FutureOfDirectory: () => (T$0.FutureOfDirectory = dart.constFn(async.Future$(io.Directory)))(),
    DirectoryToFutureOfDirectory: () => (T$0.DirectoryToFutureOfDirectory = dart.constFn(dart.fnType(T$0.FutureOfDirectory(), [io.Directory])))(),
    FutureOrOfDirectory: () => (T$0.FutureOrOfDirectory = dart.constFn(async.FutureOr$(io.Directory)))(),
    boolToFutureOrOfDirectory: () => (T$0.boolToFutureOrOfDirectory = dart.constFn(dart.fnType(T$0.FutureOrOfDirectory(), [core.bool])))(),
    dynamicTo_Directory: () => (T$0.dynamicTo_Directory = dart.constFn(dart.fnType(io._Directory, [dart.dynamic])))(),
    dynamicToDirectory: () => (T$0.dynamicToDirectory = dart.constFn(dart.fnType(io.Directory, [dart.dynamic])))(),
    JSArrayOfFileSystemEntity: () => (T$0.JSArrayOfFileSystemEntity = dart.constFn(_interceptors.JSArray$(io.FileSystemEntity)))(),
    FutureOrOfString: () => (T$0.FutureOrOfString = dart.constFn(async.FutureOr$(core.String)))(),
    dynamicToFutureOrOfString: () => (T$0.dynamicToFutureOrOfString = dart.constFn(dart.fnType(T$0.FutureOrOfString(), [dart.dynamic])))(),
    dynamicToFutureOrOfbool: () => (T$0.dynamicToFutureOrOfbool = dart.constFn(dart.fnType(T$.FutureOrOfbool(), [dart.dynamic])))(),
    FileSystemEntityTypeTobool: () => (T$0.FileSystemEntityTypeTobool = dart.constFn(dart.fnType(core.bool, [io.FileSystemEntityType])))(),
    dynamicToFileSystemEntityType: () => (T$0.dynamicToFileSystemEntityType = dart.constFn(dart.fnType(io.FileSystemEntityType, [dart.dynamic])))(),
    StreamControllerOfFileSystemEntity: () => (T$0.StreamControllerOfFileSystemEntity = dart.constFn(async.StreamController$(io.FileSystemEntity)))(),
    StreamControllerOfUint8List: () => (T$0.StreamControllerOfUint8List = dart.constFn(async.StreamController$(typed_data.Uint8List)))(),
    VoidToFuture: () => (T$0.VoidToFuture = dart.constFn(dart.fnType(async.Future, [])))(),
    Uint8ListToNull: () => (T$0.Uint8ListToNull = dart.constFn(dart.fnType(core.Null, [typed_data.Uint8List])))(),
    RandomAccessFileTovoid: () => (T$0.RandomAccessFileTovoid = dart.constFn(dart.fnType(dart.void, [io.RandomAccessFile])))(),
    FutureOfRandomAccessFile: () => (T$0.FutureOfRandomAccessFile = dart.constFn(async.Future$(io.RandomAccessFile)))(),
    FileN: () => (T$0.FileN = dart.constFn(dart.nullable(io.File)))(),
    CompleterOfFileN: () => (T$0.CompleterOfFileN = dart.constFn(async.Completer$(T$0.FileN())))(),
    StreamSubscriptionOfListOfint: () => (T$0.StreamSubscriptionOfListOfint = dart.constFn(async.StreamSubscription$(T$0.ListOfint())))(),
    VoidToStreamSubscriptionOfListOfint: () => (T$0.VoidToStreamSubscriptionOfListOfint = dart.constFn(dart.fnType(T$0.StreamSubscriptionOfListOfint(), [])))(),
    StreamSubscriptionOfListOfintTodynamic: () => (T$0.StreamSubscriptionOfListOfintTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$0.StreamSubscriptionOfListOfint()])))(),
    dynamicAndStackTraceTovoid: () => (T$0.dynamicAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, core.StackTrace])))(),
    ListOfintTovoid: () => (T$0.ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T$0.ListOfint()])))(),
    RandomAccessFileToNull: () => (T$0.RandomAccessFileToNull = dart.constFn(dart.fnType(core.Null, [io.RandomAccessFile])))(),
    RandomAccessFileToFutureOfvoid: () => (T$0.RandomAccessFileToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [io.RandomAccessFile])))(),
    voidToFileN: () => (T$0.voidToFileN = dart.constFn(dart.fnType(T$0.FileN(), [dart.void])))(),
    DirectoryN: () => (T$0.DirectoryN = dart.constFn(dart.nullable(io.Directory)))(),
    DirectoryNToFuture: () => (T$0.DirectoryNToFuture = dart.constFn(dart.fnType(async.Future, [T$0.DirectoryN()])))(),
    dynamicTo_File: () => (T$0.dynamicTo_File = dart.constFn(dart.fnType(io._File, [dart.dynamic])))(),
    FileSystemEntityTo_File: () => (T$0.FileSystemEntityTo_File = dart.constFn(dart.fnType(io._File, [io.FileSystemEntity])))(),
    dynamicToFile: () => (T$0.dynamicToFile = dart.constFn(dart.fnType(io.File, [dart.dynamic])))(),
    dynamicTo_RandomAccessFile: () => (T$0.dynamicTo_RandomAccessFile = dart.constFn(dart.fnType(io._RandomAccessFile, [dart.dynamic])))(),
    FutureOrOfint: () => (T$0.FutureOrOfint = dart.constFn(async.FutureOr$(core.int)))(),
    dynamicToFutureOrOfint: () => (T$0.dynamicToFutureOrOfint = dart.constFn(dart.fnType(T$0.FutureOrOfint(), [dart.dynamic])))(),
    dynamicToDateTime: () => (T$0.dynamicToDateTime = dart.constFn(dart.fnType(core.DateTime, [dart.dynamic])))(),
    CompleterOfUint8List: () => (T$0.CompleterOfUint8List = dart.constFn(async.Completer$(typed_data.Uint8List)))(),
    FutureOfUint8List: () => (T$0.FutureOfUint8List = dart.constFn(async.Future$(typed_data.Uint8List)))(),
    RandomAccessFileToFutureOfUint8List: () => (T$0.RandomAccessFileToFutureOfUint8List = dart.constFn(dart.fnType(T$0.FutureOfUint8List(), [io.RandomAccessFile])))(),
    intToFutureOfUint8List: () => (T$0.intToFutureOfUint8List = dart.constFn(dart.fnType(T$0.FutureOfUint8List(), [core.int])))(),
    FutureOfString: () => (T$0.FutureOfString = dart.constFn(async.Future$(core.String)))(),
    Uint8ListToFutureOrOfString: () => (T$0.Uint8ListToFutureOrOfString = dart.constFn(dart.fnType(T$0.FutureOrOfString(), [typed_data.Uint8List])))(),
    RandomAccessFileTo_File: () => (T$0.RandomAccessFileTo_File = dart.constFn(dart.fnType(io._File, [io.RandomAccessFile])))(),
    FutureOrOfFile: () => (T$0.FutureOrOfFile = dart.constFn(async.FutureOr$(io.File)))(),
    RandomAccessFileToFutureOrOfFile: () => (T$0.RandomAccessFileToFutureOrOfFile = dart.constFn(dart.fnType(T$0.FutureOrOfFile(), [io.RandomAccessFile])))(),
    FutureOfFile: () => (T$0.FutureOfFile = dart.constFn(async.Future$(io.File)))(),
    RandomAccessFileToFutureOfFile: () => (T$0.RandomAccessFileToFutureOfFile = dart.constFn(dart.fnType(T$0.FutureOfFile(), [io.RandomAccessFile])))(),
    dynamicAnddynamicToFutureOfServiceExtensionResponse: () => (T$0.dynamicAnddynamicToFutureOfServiceExtensionResponse = dart.constFn(dart.fnType(T$0.FutureOfServiceExtensionResponse(), [dart.dynamic, dart.dynamic])))(),
    dynamicToUint8List: () => (T$0.dynamicToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [dart.dynamic])))(),
    FutureOfint: () => (T$0.FutureOfint = dart.constFn(async.Future$(core.int)))(),
    dynamicToint: () => (T$0.dynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic])))(),
    FileSystemEntityTypeL: () => (T$0.FileSystemEntityTypeL = dart.constFn(dart.legacy(io.FileSystemEntityType)))(),
    dynamicToFileStat: () => (T$0.dynamicToFileStat = dart.constFn(dart.fnType(io.FileStat, [dart.dynamic])))(),
    ListOfMapOfString$dynamic: () => (T$0.ListOfMapOfString$dynamic = dart.constFn(core.List$(T$0.MapOfString$dynamic())))(),
    _FileResourceInfoToMapOfString$dynamic: () => (T$0._FileResourceInfoToMapOfString$dynamic = dart.constFn(dart.fnType(T$0.MapOfString$dynamic(), [io._FileResourceInfo])))(),
    IdentityMapOfint$_FileResourceInfo: () => (T$0.IdentityMapOfint$_FileResourceInfo = dart.constFn(_js_helper.IdentityMap$(core.int, io._FileResourceInfo)))(),
    _SpawnedProcessResourceInfoToMapOfString$dynamic: () => (T$0._SpawnedProcessResourceInfoToMapOfString$dynamic = dart.constFn(dart.fnType(T$0.MapOfString$dynamic(), [io._SpawnedProcessResourceInfo])))(),
    LinkedMapOfint$_SpawnedProcessResourceInfo: () => (T$0.LinkedMapOfint$_SpawnedProcessResourceInfo = dart.constFn(_js_helper.LinkedMap$(core.int, io._SpawnedProcessResourceInfo)))(),
    dynamicTo_Link: () => (T$0.dynamicTo_Link = dart.constFn(dart.fnType(io._Link, [dart.dynamic])))(),
    FutureOfLink: () => (T$0.FutureOfLink = dart.constFn(async.Future$(io.Link)))(),
    FileSystemEntityToFutureOfLink: () => (T$0.FileSystemEntityToFutureOfLink = dart.constFn(dart.fnType(T$0.FutureOfLink(), [io.FileSystemEntity])))(),
    FileSystemEntityTo_Link: () => (T$0.FileSystemEntityTo_Link = dart.constFn(dart.fnType(io._Link, [io.FileSystemEntity])))(),
    dynamicToLink: () => (T$0.dynamicToLink = dart.constFn(dart.fnType(io.Link, [dart.dynamic])))(),
    _SocketStatisticToMapOfString$dynamic: () => (T$0._SocketStatisticToMapOfString$dynamic = dart.constFn(dart.fnType(T$0.MapOfString$dynamic(), [io._SocketStatistic])))(),
    IdentityMapOfint$_SocketStatistic: () => (T$0.IdentityMapOfint$_SocketStatistic = dart.constFn(_js_helper.IdentityMap$(core.int, io._SocketStatistic)))(),
    _SocketProfileTypeL: () => (T$0._SocketProfileTypeL = dart.constFn(dart.legacy(io._SocketProfileType)))(),
    IOOverridesN: () => (T$0.IOOverridesN = dart.constFn(dart.nullable(io.IOOverrides)))(),
    _CaseInsensitiveStringMapOfString: () => (T$0._CaseInsensitiveStringMapOfString = dart.constFn(io._CaseInsensitiveStringMap$(core.String)))(),
    LinkedMapOfString$String: () => (T$0.LinkedMapOfString$String = dart.constFn(_js_helper.LinkedMap$(core.String, core.String)))(),
    UnmodifiableMapViewOfString$String: () => (T$0.UnmodifiableMapViewOfString$String = dart.constFn(collection.UnmodifiableMapView$(core.String, core.String)))(),
    ProcessStartModeL: () => (T$0.ProcessStartModeL = dart.constFn(dart.legacy(io.ProcessStartMode)))(),
    RawSecureServerSocketToSecureServerSocket: () => (T$0.RawSecureServerSocketToSecureServerSocket = dart.constFn(dart.fnType(io.SecureServerSocket, [io.RawSecureServerSocket])))(),
    RawSecureSocketToSecureSocket: () => (T$0.RawSecureSocketToSecureSocket = dart.constFn(dart.fnType(io.SecureSocket, [io.RawSecureSocket])))(),
    ConnectionTaskOfSecureSocket: () => (T$0.ConnectionTaskOfSecureSocket = dart.constFn(io.ConnectionTask$(io.SecureSocket)))(),
    ConnectionTaskOfRawSecureSocket: () => (T$0.ConnectionTaskOfRawSecureSocket = dart.constFn(io.ConnectionTask$(io.RawSecureSocket)))(),
    ConnectionTaskOfRawSecureSocketToConnectionTaskOfSecureSocket: () => (T$0.ConnectionTaskOfRawSecureSocketToConnectionTaskOfSecureSocket = dart.constFn(dart.fnType(T$0.ConnectionTaskOfSecureSocket(), [T$0.ConnectionTaskOfRawSecureSocket()])))(),
    StreamSubscriptionOfRawSocketEvent: () => (T$0.StreamSubscriptionOfRawSocketEvent = dart.constFn(async.StreamSubscription$(io.RawSocketEvent)))(),
    StreamSubscriptionNOfRawSocketEvent: () => (T$0.StreamSubscriptionNOfRawSocketEvent = dart.constFn(dart.nullable(T$0.StreamSubscriptionOfRawSocketEvent())))(),
    FutureOfRawSecureSocket: () => (T$0.FutureOfRawSecureSocket = dart.constFn(async.Future$(io.RawSecureSocket)))(),
    dynamicToFutureOfRawSecureSocket: () => (T$0.dynamicToFutureOfRawSecureSocket = dart.constFn(dart.fnType(T$0.FutureOfRawSecureSocket(), [dart.dynamic])))(),
    StreamControllerOfRawSecureSocket: () => (T$0.StreamControllerOfRawSecureSocket = dart.constFn(async.StreamController$(io.RawSecureSocket)))(),
    RawServerSocketToRawSecureServerSocket: () => (T$0.RawServerSocketToRawSecureServerSocket = dart.constFn(dart.fnType(io.RawSecureServerSocket, [io.RawServerSocket])))(),
    RawSecureSocketToNull: () => (T$0.RawSecureSocketToNull = dart.constFn(dart.fnType(core.Null, [io.RawSecureSocket])))(),
    RawSocketToFutureOfRawSecureSocket: () => (T$0.RawSocketToFutureOfRawSecureSocket = dart.constFn(dart.fnType(T$0.FutureOfRawSecureSocket(), [io.RawSocket])))(),
    ConnectionTaskOfRawSocket: () => (T$0.ConnectionTaskOfRawSocket = dart.constFn(io.ConnectionTask$(io.RawSocket)))(),
    ConnectionTaskOfRawSocketToConnectionTaskOfRawSecureSocket: () => (T$0.ConnectionTaskOfRawSocketToConnectionTaskOfRawSecureSocket = dart.constFn(dart.fnType(T$0.ConnectionTaskOfRawSecureSocket(), [T$0.ConnectionTaskOfRawSocket()])))(),
    CompleterOf_RawSecureSocket: () => (T$0.CompleterOf_RawSecureSocket = dart.constFn(async.Completer$(io._RawSecureSocket)))(),
    StreamControllerOfRawSocketEvent: () => (T$0.StreamControllerOfRawSocketEvent = dart.constFn(async.StreamController$(io.RawSocketEvent)))(),
    CompleterOfRawSecureSocket: () => (T$0.CompleterOfRawSecureSocket = dart.constFn(async.Completer$(io.RawSecureSocket)))(),
    intToint: () => (T$0.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    ListOfintAndStringTovoid: () => (T$0.ListOfintAndStringTovoid = dart.constFn(dart.fnType(dart.void, [T$0.ListOfint(), core.String])))(),
    _RawSocketOptionsL: () => (T$0._RawSocketOptionsL = dart.constFn(dart.legacy(io._RawSocketOptions)))(),
    JSArrayOf_DomainNetworkPolicy: () => (T$0.JSArrayOf_DomainNetworkPolicy = dart.constFn(_interceptors.JSArray$(io._DomainNetworkPolicy)))(),
    StdoutN: () => (T$0.StdoutN = dart.constFn(dart.nullable(io.Stdout)))(),
    Fn__ToR: () => (T$0.Fn__ToR = dart.constFn(dart.gFnType(R => [R, [dart.fnType(R, [])], {onError: T$.FunctionN(), zoneSpecification: T$.ZoneSpecificationN(), zoneValues: T$.MapNOfObjectN$ObjectN()}, {}], R => [T$.ObjectN()])))(),
    LinkedMapOfSymbol$dynamic: () => (T$0.LinkedMapOfSymbol$dynamic = dart.constFn(_js_helper.LinkedMap$(core.Symbol, dart.dynamic)))(),
    ObjectToObject: () => (T$0.ObjectToObject = dart.constFn(dart.fnType(core.Object, [core.Object])))(),
    ObjectTo_DartObject: () => (T$0.ObjectTo_DartObject = dart.constFn(dart.fnType(js._DartObject, [core.Object])))(),
    ObjectToJsObject: () => (T$0.ObjectToJsObject = dart.constFn(dart.fnType(js.JsObject, [core.Object])))(),
    PointOfnum: () => (T$0.PointOfnum = dart.constFn(math.Point$(core.num)))(),
    RectangleOfnum: () => (T$0.RectangleOfnum = dart.constFn(math.Rectangle$(core.num)))(),
    EventL: () => (T$0.EventL = dart.constFn(dart.legacy(html$.Event)))(),
    EventStreamProviderOfEventL: () => (T$0.EventStreamProviderOfEventL = dart.constFn(html$.EventStreamProvider$(T$0.EventL())))(),
    VersionChangeEventL: () => (T$0.VersionChangeEventL = dart.constFn(dart.legacy(indexed_db.VersionChangeEvent)))(),
    EventStreamProviderOfVersionChangeEventL: () => (T$0.EventStreamProviderOfVersionChangeEventL = dart.constFn(html$.EventStreamProvider$(T$0.VersionChangeEventL())))(),
    FutureOfDatabase: () => (T$0.FutureOfDatabase = dart.constFn(async.Future$(indexed_db.Database)))(),
    CompleterOfIdbFactory: () => (T$0.CompleterOfIdbFactory = dart.constFn(async.Completer$(indexed_db.IdbFactory)))(),
    EventTovoid: () => (T$0.EventTovoid = dart.constFn(dart.fnType(dart.void, [html$.Event])))(),
    FutureOfIdbFactory: () => (T$0.FutureOfIdbFactory = dart.constFn(async.Future$(indexed_db.IdbFactory)))(),
    ObserverChangesTovoid: () => (T$0.ObserverChangesTovoid = dart.constFn(dart.fnType(dart.void, [indexed_db.ObserverChanges])))(),
    CompleterOfDatabase: () => (T$0.CompleterOfDatabase = dart.constFn(async.Completer$(indexed_db.Database)))(),
    EventToNull: () => (T$0.EventToNull = dart.constFn(dart.fnType(core.Null, [html$.Event])))(),
    ElementN: () => (T$0.ElementN = dart.constFn(dart.nullable(html$.Element)))(),
    JSArrayOfEventTarget: () => (T$0.JSArrayOfEventTarget = dart.constFn(_interceptors.JSArray$(html$.EventTarget)))(),
    NodeTobool: () => (T$0.NodeTobool = dart.constFn(dart.fnType(core.bool, [html$.Node])))(),
    CompleterOfScrollState: () => (T$0.CompleterOfScrollState = dart.constFn(async.Completer$(html$.ScrollState)))(),
    ScrollStateTovoid: () => (T$0.ScrollStateTovoid = dart.constFn(dart.fnType(dart.void, [html$.ScrollState])))(),
    MapOfString$dynamicTobool: () => (T$0.MapOfString$dynamicTobool = dart.constFn(dart.fnType(core.bool, [T$0.MapOfString$dynamic()])))(),
    MapN: () => (T$0.MapN = dart.constFn(dart.nullable(core.Map)))(),
    ObjectNToNvoid: () => (T$0.ObjectNToNvoid = dart.constFn(dart.nullable(T$.ObjectNTovoid())))(),
    MapNAndFnTodynamic: () => (T$0.MapNAndFnTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$0.MapN()], [T$0.ObjectNToNvoid()])))(),
    WheelEventL: () => (T$0.WheelEventL = dart.constFn(dart.legacy(html$.WheelEvent)))(),
    _CustomEventStreamProviderOfWheelEventL: () => (T$0._CustomEventStreamProviderOfWheelEventL = dart.constFn(html$._CustomEventStreamProvider$(T$0.WheelEventL())))(),
    EventTargetToString: () => (T$0.EventTargetToString = dart.constFn(dart.fnType(core.String, [html$.EventTarget])))(),
    TransitionEventL: () => (T$0.TransitionEventL = dart.constFn(dart.legacy(html$.TransitionEvent)))(),
    _CustomEventStreamProviderOfTransitionEventL: () => (T$0._CustomEventStreamProviderOfTransitionEventL = dart.constFn(html$._CustomEventStreamProvider$(T$0.TransitionEventL())))(),
    MouseEventL: () => (T$0.MouseEventL = dart.constFn(dart.legacy(html$.MouseEvent)))(),
    EventStreamProviderOfMouseEventL: () => (T$0.EventStreamProviderOfMouseEventL = dart.constFn(html$.EventStreamProvider$(T$0.MouseEventL())))(),
    ClipboardEventL: () => (T$0.ClipboardEventL = dart.constFn(dart.legacy(html$.ClipboardEvent)))(),
    EventStreamProviderOfClipboardEventL: () => (T$0.EventStreamProviderOfClipboardEventL = dart.constFn(html$.EventStreamProvider$(T$0.ClipboardEventL())))(),
    KeyboardEventL: () => (T$0.KeyboardEventL = dart.constFn(dart.legacy(html$.KeyboardEvent)))(),
    EventStreamProviderOfKeyboardEventL: () => (T$0.EventStreamProviderOfKeyboardEventL = dart.constFn(html$.EventStreamProvider$(T$0.KeyboardEventL())))(),
    TouchEventL: () => (T$0.TouchEventL = dart.constFn(dart.legacy(html$.TouchEvent)))(),
    EventStreamProviderOfTouchEventL: () => (T$0.EventStreamProviderOfTouchEventL = dart.constFn(html$.EventStreamProvider$(T$0.TouchEventL())))(),
    EventStreamProviderOfWheelEventL: () => (T$0.EventStreamProviderOfWheelEventL = dart.constFn(html$.EventStreamProvider$(T$0.WheelEventL())))(),
    ProgressEventL: () => (T$0.ProgressEventL = dart.constFn(dart.legacy(html$.ProgressEvent)))(),
    EventStreamProviderOfProgressEventL: () => (T$0.EventStreamProviderOfProgressEventL = dart.constFn(html$.EventStreamProvider$(T$0.ProgressEventL())))(),
    MessageEventL: () => (T$0.MessageEventL = dart.constFn(dart.legacy(html$.MessageEvent)))(),
    EventStreamProviderOfMessageEventL: () => (T$0.EventStreamProviderOfMessageEventL = dart.constFn(html$.EventStreamProvider$(T$0.MessageEventL())))(),
    PopStateEventL: () => (T$0.PopStateEventL = dart.constFn(dart.legacy(html$.PopStateEvent)))(),
    EventStreamProviderOfPopStateEventL: () => (T$0.EventStreamProviderOfPopStateEventL = dart.constFn(html$.EventStreamProvider$(T$0.PopStateEventL())))(),
    StorageEventL: () => (T$0.StorageEventL = dart.constFn(dart.legacy(html$.StorageEvent)))(),
    EventStreamProviderOfStorageEventL: () => (T$0.EventStreamProviderOfStorageEventL = dart.constFn(html$.EventStreamProvider$(T$0.StorageEventL())))(),
    CompleterOfBlob: () => (T$0.CompleterOfBlob = dart.constFn(async.Completer$(html$.Blob)))(),
    BlobN: () => (T$0.BlobN = dart.constFn(dart.nullable(html$.Blob)))(),
    BlobNTovoid: () => (T$0.BlobNTovoid = dart.constFn(dart.fnType(dart.void, [T$0.BlobN()])))(),
    ContextEventL: () => (T$0.ContextEventL = dart.constFn(dart.legacy(web_gl.ContextEvent)))(),
    EventStreamProviderOfContextEventL: () => (T$0.EventStreamProviderOfContextEventL = dart.constFn(html$.EventStreamProvider$(T$0.ContextEventL())))(),
    JSArrayOfnum: () => (T$0.JSArrayOfnum = dart.constFn(_interceptors.JSArray$(core.num)))(),
    dynamicToCssStyleDeclaration: () => (T$0.dynamicToCssStyleDeclaration = dart.constFn(dart.fnType(html$.CssStyleDeclaration, [dart.dynamic])))(),
    CssStyleDeclarationTovoid: () => (T$0.CssStyleDeclarationTovoid = dart.constFn(dart.fnType(dart.void, [html$.CssStyleDeclaration])))(),
    ListOfCssTransformComponent: () => (T$0.ListOfCssTransformComponent = dart.constFn(core.List$(html$.CssTransformComponent)))(),
    CompleterOfEntry: () => (T$0.CompleterOfEntry = dart.constFn(async.Completer$(html$.Entry)))(),
    EntryTovoid: () => (T$0.EntryTovoid = dart.constFn(dart.fnType(dart.void, [html$.Entry])))(),
    DomExceptionTovoid: () => (T$0.DomExceptionTovoid = dart.constFn(dart.fnType(dart.void, [html$.DomException])))(),
    CompleterOfMetadata: () => (T$0.CompleterOfMetadata = dart.constFn(async.Completer$(html$.Metadata)))(),
    MetadataTovoid: () => (T$0.MetadataTovoid = dart.constFn(dart.fnType(dart.void, [html$.Metadata])))(),
    ListOfEntry: () => (T$0.ListOfEntry = dart.constFn(core.List$(html$.Entry)))(),
    CompleterOfListOfEntry: () => (T$0.CompleterOfListOfEntry = dart.constFn(async.Completer$(T$0.ListOfEntry())))(),
    ListTovoid: () => (T$0.ListTovoid = dart.constFn(dart.fnType(dart.void, [core.List])))(),
    SecurityPolicyViolationEventL: () => (T$0.SecurityPolicyViolationEventL = dart.constFn(dart.legacy(html$.SecurityPolicyViolationEvent)))(),
    EventStreamProviderOfSecurityPolicyViolationEventL: () => (T$0.EventStreamProviderOfSecurityPolicyViolationEventL = dart.constFn(html$.EventStreamProvider$(T$0.SecurityPolicyViolationEventL())))(),
    IterableOfElement: () => (T$0.IterableOfElement = dart.constFn(core.Iterable$(html$.Element)))(),
    ListOfElement: () => (T$0.ListOfElement = dart.constFn(core.List$(html$.Element)))(),
    ElementTobool: () => (T$0.ElementTobool = dart.constFn(dart.fnType(core.bool, [html$.Element])))(),
    _EventStreamOfEvent: () => (T$0._EventStreamOfEvent = dart.constFn(html$._EventStream$(html$.Event)))(),
    _ElementEventStreamImplOfEvent: () => (T$0._ElementEventStreamImplOfEvent = dart.constFn(html$._ElementEventStreamImpl$(html$.Event)))(),
    CompleterOfFileWriter: () => (T$0.CompleterOfFileWriter = dart.constFn(async.Completer$(html$.FileWriter)))(),
    FileWriterTovoid: () => (T$0.FileWriterTovoid = dart.constFn(dart.fnType(dart.void, [html$.FileWriter])))(),
    CompleterOfFile: () => (T$0.CompleterOfFile = dart.constFn(async.Completer$(html$.File)))(),
    FileN$1: () => (T$0.FileN$1 = dart.constFn(dart.nullable(html$.File)))(),
    FileNTovoid: () => (T$0.FileNTovoid = dart.constFn(dart.fnType(dart.void, [T$0.FileN$1()])))(),
    FontFaceSetLoadEventL: () => (T$0.FontFaceSetLoadEventL = dart.constFn(dart.legacy(html$.FontFaceSetLoadEvent)))(),
    EventStreamProviderOfFontFaceSetLoadEventL: () => (T$0.EventStreamProviderOfFontFaceSetLoadEventL = dart.constFn(html$.EventStreamProvider$(T$0.FontFaceSetLoadEventL())))(),
    CompleterOfGeoposition: () => (T$0.CompleterOfGeoposition = dart.constFn(async.Completer$(html$.Geoposition)))(),
    GeopositionTovoid: () => (T$0.GeopositionTovoid = dart.constFn(dart.fnType(dart.void, [html$.Geoposition])))(),
    PositionErrorTovoid: () => (T$0.PositionErrorTovoid = dart.constFn(dart.fnType(dart.void, [html$.PositionError])))(),
    StreamControllerOfGeoposition: () => (T$0.StreamControllerOfGeoposition = dart.constFn(async.StreamController$(html$.Geoposition)))(),
    _CustomEventStreamProviderOfEventL: () => (T$0._CustomEventStreamProviderOfEventL = dart.constFn(html$._CustomEventStreamProvider$(T$0.EventL())))(),
    HttpRequestToString: () => (T$0.HttpRequestToString = dart.constFn(dart.fnType(core.String, [html$.HttpRequest])))(),
    StringAndStringTovoid: () => (T$0.StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))(),
    CompleterOfHttpRequest: () => (T$0.CompleterOfHttpRequest = dart.constFn(async.Completer$(html$.HttpRequest)))(),
    ProgressEventTovoid: () => (T$0.ProgressEventTovoid = dart.constFn(dart.fnType(dart.void, [html$.ProgressEvent])))(),
    CompleterOfString: () => (T$0.CompleterOfString = dart.constFn(async.Completer$(core.String)))(),
    FutureOrNOfString: () => (T$0.FutureOrNOfString = dart.constFn(dart.nullable(T$0.FutureOrOfString())))(),
    ListAndIntersectionObserverTovoid: () => (T$0.ListAndIntersectionObserverTovoid = dart.constFn(dart.fnType(dart.void, [core.List, html$.IntersectionObserver])))(),
    ListOfMediaStreamTrack: () => (T$0.ListOfMediaStreamTrack = dart.constFn(core.List$(html$.MediaStreamTrack)))(),
    MessagePortL: () => (T$0.MessagePortL = dart.constFn(dart.legacy(html$.MessagePort)))(),
    MidiMessageEventL: () => (T$0.MidiMessageEventL = dart.constFn(dart.legacy(html$.MidiMessageEvent)))(),
    EventStreamProviderOfMidiMessageEventL: () => (T$0.EventStreamProviderOfMidiMessageEventL = dart.constFn(html$.EventStreamProvider$(T$0.MidiMessageEventL())))(),
    MapTobool: () => (T$0.MapTobool = dart.constFn(dart.fnType(core.bool, [core.Map])))(),
    JSArrayOfMap: () => (T$0.JSArrayOfMap = dart.constFn(_interceptors.JSArray$(core.Map)))(),
    ListAndMutationObserverTovoid: () => (T$0.ListAndMutationObserverTovoid = dart.constFn(dart.fnType(dart.void, [core.List, html$.MutationObserver])))(),
    ListAndMutationObserverToNvoid: () => (T$0.ListAndMutationObserverToNvoid = dart.constFn(dart.nullable(T$0.ListAndMutationObserverTovoid())))(),
    boolL: () => (T$0.boolL = dart.constFn(dart.legacy(core.bool)))(),
    CompleterOfMediaStream: () => (T$0.CompleterOfMediaStream = dart.constFn(async.Completer$(html$.MediaStream)))(),
    MediaStreamTovoid: () => (T$0.MediaStreamTovoid = dart.constFn(dart.fnType(dart.void, [html$.MediaStream])))(),
    NavigatorUserMediaErrorTovoid: () => (T$0.NavigatorUserMediaErrorTovoid = dart.constFn(dart.fnType(dart.void, [html$.NavigatorUserMediaError])))(),
    IterableOfNode: () => (T$0.IterableOfNode = dart.constFn(core.Iterable$(html$.Node)))(),
    NodeN$1: () => (T$0.NodeN$1 = dart.constFn(dart.nullable(html$.Node)))(),
    PerformanceObserverEntryListAndPerformanceObserverTovoid: () => (T$0.PerformanceObserverEntryListAndPerformanceObserverTovoid = dart.constFn(dart.fnType(dart.void, [html$.PerformanceObserverEntryList, html$.PerformanceObserver])))(),
    ListAndReportingObserverTovoid: () => (T$0.ListAndReportingObserverTovoid = dart.constFn(dart.fnType(dart.void, [core.List, html$.ReportingObserver])))(),
    ListAndResizeObserverTovoid: () => (T$0.ListAndResizeObserverTovoid = dart.constFn(dart.fnType(dart.void, [core.List, html$.ResizeObserver])))(),
    RtcDtmfToneChangeEventL: () => (T$0.RtcDtmfToneChangeEventL = dart.constFn(dart.legacy(html$.RtcDtmfToneChangeEvent)))(),
    EventStreamProviderOfRtcDtmfToneChangeEventL: () => (T$0.EventStreamProviderOfRtcDtmfToneChangeEventL = dart.constFn(html$.EventStreamProvider$(T$0.RtcDtmfToneChangeEventL())))(),
    JSArrayOfMapOfString$String: () => (T$0.JSArrayOfMapOfString$String = dart.constFn(_interceptors.JSArray$(T$0.MapOfString$String())))(),
    CompleterOfRtcStatsResponse: () => (T$0.CompleterOfRtcStatsResponse = dart.constFn(async.Completer$(html$.RtcStatsResponse)))(),
    RtcStatsResponseTovoid: () => (T$0.RtcStatsResponseTovoid = dart.constFn(dart.fnType(dart.void, [html$.RtcStatsResponse])))(),
    MediaStreamEventL: () => (T$0.MediaStreamEventL = dart.constFn(dart.legacy(html$.MediaStreamEvent)))(),
    EventStreamProviderOfMediaStreamEventL: () => (T$0.EventStreamProviderOfMediaStreamEventL = dart.constFn(html$.EventStreamProvider$(T$0.MediaStreamEventL())))(),
    RtcDataChannelEventL: () => (T$0.RtcDataChannelEventL = dart.constFn(dart.legacy(html$.RtcDataChannelEvent)))(),
    EventStreamProviderOfRtcDataChannelEventL: () => (T$0.EventStreamProviderOfRtcDataChannelEventL = dart.constFn(html$.EventStreamProvider$(T$0.RtcDataChannelEventL())))(),
    RtcPeerConnectionIceEventL: () => (T$0.RtcPeerConnectionIceEventL = dart.constFn(dart.legacy(html$.RtcPeerConnectionIceEvent)))(),
    EventStreamProviderOfRtcPeerConnectionIceEventL: () => (T$0.EventStreamProviderOfRtcPeerConnectionIceEventL = dart.constFn(html$.EventStreamProvider$(T$0.RtcPeerConnectionIceEventL())))(),
    RtcTrackEventL: () => (T$0.RtcTrackEventL = dart.constFn(dart.legacy(html$.RtcTrackEvent)))(),
    EventStreamProviderOfRtcTrackEventL: () => (T$0.EventStreamProviderOfRtcTrackEventL = dart.constFn(html$.EventStreamProvider$(T$0.RtcTrackEventL())))(),
    UnmodifiableListViewOfOptionElement: () => (T$0.UnmodifiableListViewOfOptionElement = dart.constFn(collection.UnmodifiableListView$(html$.OptionElement)))(),
    IterableOfOptionElement: () => (T$0.IterableOfOptionElement = dart.constFn(core.Iterable$(html$.OptionElement)))(),
    OptionElementTobool: () => (T$0.OptionElementTobool = dart.constFn(dart.fnType(core.bool, [html$.OptionElement])))(),
    JSArrayOfOptionElement: () => (T$0.JSArrayOfOptionElement = dart.constFn(_interceptors.JSArray$(html$.OptionElement)))(),
    ForeignFetchEventL: () => (T$0.ForeignFetchEventL = dart.constFn(dart.legacy(html$.ForeignFetchEvent)))(),
    EventStreamProviderOfForeignFetchEventL: () => (T$0.EventStreamProviderOfForeignFetchEventL = dart.constFn(html$.EventStreamProvider$(T$0.ForeignFetchEventL())))(),
    SpeechRecognitionErrorL: () => (T$0.SpeechRecognitionErrorL = dart.constFn(dart.legacy(html$.SpeechRecognitionError)))(),
    EventStreamProviderOfSpeechRecognitionErrorL: () => (T$0.EventStreamProviderOfSpeechRecognitionErrorL = dart.constFn(html$.EventStreamProvider$(T$0.SpeechRecognitionErrorL())))(),
    SpeechRecognitionEventL: () => (T$0.SpeechRecognitionEventL = dart.constFn(dart.legacy(html$.SpeechRecognitionEvent)))(),
    EventStreamProviderOfSpeechRecognitionEventL: () => (T$0.EventStreamProviderOfSpeechRecognitionEventL = dart.constFn(html$.EventStreamProvider$(T$0.SpeechRecognitionEventL())))(),
    SpeechSynthesisEventL: () => (T$0.SpeechSynthesisEventL = dart.constFn(dart.legacy(html$.SpeechSynthesisEvent)))(),
    EventStreamProviderOfSpeechSynthesisEventL: () => (T$0.EventStreamProviderOfSpeechSynthesisEventL = dart.constFn(html$.EventStreamProvider$(T$0.SpeechSynthesisEventL())))(),
    _WrappedListOfTableSectionElement: () => (T$0._WrappedListOfTableSectionElement = dart.constFn(html$._WrappedList$(html$.TableSectionElement)))(),
    _WrappedListOfTableRowElement: () => (T$0._WrappedListOfTableRowElement = dart.constFn(html$._WrappedList$(html$.TableRowElement)))(),
    _WrappedListOfTableCellElement: () => (T$0._WrappedListOfTableCellElement = dart.constFn(html$._WrappedList$(html$.TableCellElement)))(),
    TrackEventL: () => (T$0.TrackEventL = dart.constFn(dart.legacy(html$.TrackEvent)))(),
    EventStreamProviderOfTrackEventL: () => (T$0.EventStreamProviderOfTrackEventL = dart.constFn(html$.EventStreamProvider$(T$0.TrackEventL())))(),
    CloseEventL: () => (T$0.CloseEventL = dart.constFn(dart.legacy(html$.CloseEvent)))(),
    EventStreamProviderOfCloseEventL: () => (T$0.EventStreamProviderOfCloseEventL = dart.constFn(html$.EventStreamProvider$(T$0.CloseEventL())))(),
    CompleterOfnum: () => (T$0.CompleterOfnum = dart.constFn(async.Completer$(core.num)))(),
    numTovoid: () => (T$0.numTovoid = dart.constFn(dart.fnType(dart.void, [core.num])))(),
    IdleDeadlineTovoid: () => (T$0.IdleDeadlineTovoid = dart.constFn(dart.fnType(dart.void, [html$.IdleDeadline])))(),
    CompleterOfFileSystem: () => (T$0.CompleterOfFileSystem = dart.constFn(async.Completer$(html$.FileSystem)))(),
    FileSystemTovoid: () => (T$0.FileSystemTovoid = dart.constFn(dart.fnType(dart.void, [html$.FileSystem])))(),
    DeviceMotionEventL: () => (T$0.DeviceMotionEventL = dart.constFn(dart.legacy(html$.DeviceMotionEvent)))(),
    EventStreamProviderOfDeviceMotionEventL: () => (T$0.EventStreamProviderOfDeviceMotionEventL = dart.constFn(html$.EventStreamProvider$(T$0.DeviceMotionEventL())))(),
    DeviceOrientationEventL: () => (T$0.DeviceOrientationEventL = dart.constFn(dart.legacy(html$.DeviceOrientationEvent)))(),
    EventStreamProviderOfDeviceOrientationEventL: () => (T$0.EventStreamProviderOfDeviceOrientationEventL = dart.constFn(html$.EventStreamProvider$(T$0.DeviceOrientationEventL())))(),
    AnimationEventL: () => (T$0.AnimationEventL = dart.constFn(dart.legacy(html$.AnimationEvent)))(),
    EventStreamProviderOfAnimationEventL: () => (T$0.EventStreamProviderOfAnimationEventL = dart.constFn(html$.EventStreamProvider$(T$0.AnimationEventL())))(),
    ListOfNode: () => (T$0.ListOfNode = dart.constFn(core.List$(html$.Node)))(),
    _EventStreamOfBeforeUnloadEvent: () => (T$0._EventStreamOfBeforeUnloadEvent = dart.constFn(html$._EventStream$(html$.BeforeUnloadEvent)))(),
    StreamControllerOfBeforeUnloadEvent: () => (T$0.StreamControllerOfBeforeUnloadEvent = dart.constFn(async.StreamController$(html$.BeforeUnloadEvent)))(),
    BeforeUnloadEventTovoid: () => (T$0.BeforeUnloadEventTovoid = dart.constFn(dart.fnType(dart.void, [html$.BeforeUnloadEvent])))(),
    _ElementEventStreamImplOfBeforeUnloadEvent: () => (T$0._ElementEventStreamImplOfBeforeUnloadEvent = dart.constFn(html$._ElementEventStreamImpl$(html$.BeforeUnloadEvent)))(),
    _ElementListEventStreamImplOfBeforeUnloadEvent: () => (T$0._ElementListEventStreamImplOfBeforeUnloadEvent = dart.constFn(html$._ElementListEventStreamImpl$(html$.BeforeUnloadEvent)))(),
    GamepadN: () => (T$0.GamepadN = dart.constFn(dart.nullable(html$.Gamepad)))(),
    ElementTovoid: () => (T$0.ElementTovoid = dart.constFn(dart.fnType(dart.void, [html$.Element])))(),
    ListOfCssClassSetImpl: () => (T$0.ListOfCssClassSetImpl = dart.constFn(core.List$(html_common.CssClassSetImpl)))(),
    ElementToCssClassSet: () => (T$0.ElementToCssClassSet = dart.constFn(dart.fnType(html$.CssClassSet, [html$.Element])))(),
    _IdentityHashSetOfString: () => (T$0._IdentityHashSetOfString = dart.constFn(collection._IdentityHashSet$(core.String)))(),
    CssClassSetImplTovoid: () => (T$0.CssClassSetImplTovoid = dart.constFn(dart.fnType(dart.void, [html_common.CssClassSetImpl])))(),
    boolAndCssClassSetImplTobool: () => (T$0.boolAndCssClassSetImplTobool = dart.constFn(dart.fnType(core.bool, [core.bool, html_common.CssClassSetImpl])))(),
    StringAndStringToString: () => (T$0.StringAndStringToString = dart.constFn(dart.fnType(core.String, [core.String, core.String])))(),
    SetOfString: () => (T$0.SetOfString = dart.constFn(core.Set$(core.String)))(),
    SetOfStringTobool: () => (T$0.SetOfStringTobool = dart.constFn(dart.fnType(core.bool, [T$0.SetOfString()])))(),
    IterableOfString: () => (T$0.IterableOfString = dart.constFn(core.Iterable$(core.String)))(),
    SetOfStringTovoid: () => (T$0.SetOfStringTovoid = dart.constFn(dart.fnType(dart.void, [T$0.SetOfString()])))(),
    VoidToNString: () => (T$0.VoidToNString = dart.constFn(dart.nullable(T$.VoidToString())))(),
    EventTargetN: () => (T$0.EventTargetN = dart.constFn(dart.nullable(html$.EventTarget)))(),
    ElementAndStringAndString__Tobool: () => (T$0.ElementAndStringAndString__Tobool = dart.constFn(dart.fnType(core.bool, [html$.Element, core.String, core.String, html$._Html5NodeValidator])))(),
    LinkedHashSetOfString: () => (T$0.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    IdentityMapOfString$Function: () => (T$0.IdentityMapOfString$Function = dart.constFn(_js_helper.IdentityMap$(core.String, core.Function)))(),
    JSArrayOfKeyEvent: () => (T$0.JSArrayOfKeyEvent = dart.constFn(_interceptors.JSArray$(html$.KeyEvent)))(),
    KeyEventTobool: () => (T$0.KeyEventTobool = dart.constFn(dart.fnType(core.bool, [html$.KeyEvent])))(),
    JSArrayOfNodeValidator: () => (T$0.JSArrayOfNodeValidator = dart.constFn(_interceptors.JSArray$(html$.NodeValidator)))(),
    NodeValidatorTobool: () => (T$0.NodeValidatorTobool = dart.constFn(dart.fnType(core.bool, [html$.NodeValidator])))(),
    NodeAndNodeToint: () => (T$0.NodeAndNodeToint = dart.constFn(dart.fnType(core.int, [html$.Node, html$.Node])))(),
    NodeAndNodeNTovoid: () => (T$0.NodeAndNodeNTovoid = dart.constFn(dart.fnType(dart.void, [html$.Node, T$0.NodeN$1()])))(),
    MapNOfString$dynamic: () => (T$0.MapNOfString$dynamic = dart.constFn(dart.nullable(T$0.MapOfString$dynamic())))(),
    dynamicToMapNOfString$dynamic: () => (T$0.dynamicToMapNOfString$dynamic = dart.constFn(dart.fnType(T$0.MapNOfString$dynamic(), [dart.dynamic])))(),
    TypeN: () => (T$0.TypeN = dart.constFn(dart.nullable(core.Type)))(),
    dynamicAnddynamicTodynamic: () => (T$0.dynamicAnddynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic])))(),
    NodeToElement: () => (T$0.NodeToElement = dart.constFn(dart.fnType(html$.Element, [html$.Node])))(),
    CompleterOfAudioBuffer: () => (T$0.CompleterOfAudioBuffer = dart.constFn(async.Completer$(web_audio.AudioBuffer)))(),
    AudioBufferTovoid: () => (T$0.AudioBufferTovoid = dart.constFn(dart.fnType(dart.void, [web_audio.AudioBuffer])))(),
    AudioProcessingEventL: () => (T$0.AudioProcessingEventL = dart.constFn(dart.legacy(web_audio.AudioProcessingEvent)))(),
    EventStreamProviderOfAudioProcessingEventL: () => (T$0.EventStreamProviderOfAudioProcessingEventL = dart.constFn(html$.EventStreamProvider$(T$0.AudioProcessingEventL())))(),
    TypedDataN: () => (T$0.TypedDataN = dart.constFn(dart.nullable(typed_data.TypedData)))(),
    CompleterOfSqlTransaction: () => (T$0.CompleterOfSqlTransaction = dart.constFn(async.Completer$(web_sql.SqlTransaction)))(),
    SqlTransactionTovoid: () => (T$0.SqlTransactionTovoid = dart.constFn(dart.fnType(dart.void, [web_sql.SqlTransaction])))(),
    SqlErrorTovoid: () => (T$0.SqlErrorTovoid = dart.constFn(dart.fnType(dart.void, [web_sql.SqlError])))(),
    CompleterOfSqlResultSet: () => (T$0.CompleterOfSqlResultSet = dart.constFn(async.Completer$(web_sql.SqlResultSet)))(),
    SqlTransactionAndSqlResultSetTovoid: () => (T$0.SqlTransactionAndSqlResultSetTovoid = dart.constFn(dart.fnType(dart.void, [web_sql.SqlTransaction, web_sql.SqlResultSet])))(),
    SqlTransactionAndSqlErrorTovoid: () => (T$0.SqlTransactionAndSqlErrorTovoid = dart.constFn(dart.fnType(dart.void, [web_sql.SqlTransaction, web_sql.SqlError])))(),
    intAndintToint: () => (T$0.intAndintToint = dart.constFn(dart.fnType(core.int, [core.int, core.int])))(),
    StringNToint: () => (T$0.StringNToint = dart.constFn(dart.fnType(core.int, [T$.StringN()])))(),
    intToString: () => (T$0.intToString = dart.constFn(dart.fnType(core.String, [core.int])))(),
    SymbolAnddynamicTovoid: () => (T$0.SymbolAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.Symbol, dart.dynamic])))(),
    MapOfSymbol$ObjectN: () => (T$0.MapOfSymbol$ObjectN = dart.constFn(core.Map$(core.Symbol, T$.ObjectN())))(),
    MapOfString$StringAndStringToMapOfString$String: () => (T$0.MapOfString$StringAndStringToMapOfString$String = dart.constFn(dart.fnType(T$0.MapOfString$String(), [T$0.MapOfString$String(), core.String])))(),
    StringAndintTovoid: () => (T$0.StringAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.int])))(),
    StringAnddynamicTovoid$1: () => (T$0.StringAnddynamicTovoid$1 = dart.constFn(dart.fnType(dart.void, [core.String], [dart.dynamic])))(),
    ListOfStringL: () => (T$0.ListOfStringL = dart.constFn(core.List$(T$.StringL())))(),
    ListLOfStringL: () => (T$0.ListLOfStringL = dart.constFn(dart.legacy(T$0.ListOfStringL())))(),
    StringAndListOfStringToListOfString: () => (T$0.StringAndListOfStringToListOfString = dart.constFn(dart.fnType(T$.ListOfString(), [core.String, T$.ListOfString()])))(),
    MapOfString$ListOfString: () => (T$0.MapOfString$ListOfString = dart.constFn(core.Map$(core.String, T$.ListOfString())))(),
    StringAndStringNTovoid: () => (T$0.StringAndStringNTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$.StringN()])))(),
    IdentityMapOfString$ListOfString: () => (T$0.IdentityMapOfString$ListOfString = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListOfString())))(),
    VoidToListOfString: () => (T$0.VoidToListOfString = dart.constFn(dart.fnType(T$.ListOfString(), [])))(),
    intAndintAndintTovoid: () => (T$0.intAndintAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int, core.int])))(),
    _StringSinkConversionSinkOfStringSink: () => (T$0._StringSinkConversionSinkOfStringSink = dart.constFn(convert._StringSinkConversionSink$(core.StringSink)))(),
    ListOfUint8List: () => (T$0.ListOfUint8List = dart.constFn(core.List$(typed_data.Uint8List)))(),
    intToUint8List: () => (T$0.intToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [core.int])))(),
    dynamicAnddynamicToUint8List: () => (T$0.dynamicAnddynamicToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [dart.dynamic, dart.dynamic])))(),
    Uint8ListAndStringAndintTovoid: () => (T$0.Uint8ListAndStringAndintTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.Uint8List, core.String, core.int])))(),
    intToElement: () => (T$0.intToElement = dart.constFn(dart.fnType(html$.Element, [core.int])))(),
    IdentityMapOfString$intToElement: () => (T$0.IdentityMapOfString$intToElement = dart.constFn(_js_helper.IdentityMap$(core.String, T$0.intToElement())))(),
    IdentityMapOfint$Element: () => (T$0.IdentityMapOfint$Element = dart.constFn(_js_helper.IdentityMap$(core.int, html$.Element)))(),
    PointModeL: () => (T$0.PointModeL = dart.constFn(dart.legacy(ui.PointMode)))(),
    ClipOpL: () => (T$0.ClipOpL = dart.constFn(dart.legacy(ui.ClipOp)))(),
    VertexModeL: () => (T$0.VertexModeL = dart.constFn(dart.legacy(ui.VertexMode)))(),
    PathFillTypeL: () => (T$0.PathFillTypeL = dart.constFn(dart.legacy(ui.PathFillType)))(),
    PathOperationL: () => (T$0.PathOperationL = dart.constFn(dart.legacy(ui.PathOperation)))(),
    ByteDataN: () => (T$0.ByteDataN = dart.constFn(dart.nullable(typed_data.ByteData)))(),
    ByteDataNTovoid: () => (T$0.ByteDataNTovoid = dart.constFn(dart.fnType(dart.void, [T$0.ByteDataN()])))(),
    ListQueueOf_StoredMessage: () => (T$0.ListQueueOf_StoredMessage = dart.constFn(collection.ListQueue$(ui._StoredMessage)))(),
    IdentityMapOfString$_Channel: () => (T$0.IdentityMapOfString$_Channel = dart.constFn(_js_helper.IdentityMap$(core.String, ui._Channel)))(),
    VoidTo_Channel: () => (T$0.VoidTo_Channel = dart.constFn(dart.fnType(ui._Channel, [])))(),
    StrokeCapL: () => (T$0.StrokeCapL = dart.constFn(dart.legacy(ui.StrokeCap)))(),
    StrokeJoinL: () => (T$0.StrokeJoinL = dart.constFn(dart.legacy(ui.StrokeJoin)))(),
    PaintingStyleL: () => (T$0.PaintingStyleL = dart.constFn(dart.legacy(ui.PaintingStyle)))(),
    BlendModeL: () => (T$0.BlendModeL = dart.constFn(dart.legacy(ui.BlendMode)))(),
    ClipL: () => (T$0.ClipL = dart.constFn(dart.legacy(ui.Clip)))(),
    BlurStyleL: () => (T$0.BlurStyleL = dart.constFn(dart.legacy(ui.BlurStyle)))(),
    FilterQualityL: () => (T$0.FilterQualityL = dart.constFn(dart.legacy(ui.FilterQuality)))(),
    ImageByteFormatL: () => (T$0.ImageByteFormatL = dart.constFn(dart.legacy(ui.ImageByteFormat)))(),
    PixelFormatL: () => (T$0.PixelFormatL = dart.constFn(dart.legacy(ui.PixelFormat)))(),
    JSArrayOfShadow: () => (T$0.JSArrayOfShadow = dart.constFn(_interceptors.JSArray$(ui.Shadow)))(),
    LocaleL: () => (T$0.LocaleL = dart.constFn(dart.legacy(ui.Locale)))(),
    FramePhaseL: () => (T$0.FramePhaseL = dart.constFn(dart.legacy(ui.FramePhase)))(),
    AppLifecycleStateL: () => (T$0.AppLifecycleStateL = dart.constFn(dart.legacy(ui.AppLifecycleState)))(),
    PointerChangeL: () => (T$0.PointerChangeL = dart.constFn(dart.legacy(ui.PointerChange)))(),
    PointerDeviceKindL: () => (T$0.PointerDeviceKindL = dart.constFn(dart.legacy(ui.PointerDeviceKind)))(),
    PointerSignalKindL: () => (T$0.PointerSignalKindL = dart.constFn(dart.legacy(ui.PointerSignalKind)))(),
    PointerDataL: () => (T$0.PointerDataL = dart.constFn(dart.legacy(ui.PointerData)))(),
    SemanticsActionL: () => (T$0.SemanticsActionL = dart.constFn(dart.legacy(ui.SemanticsAction)))(),
    SemanticsFlagL: () => (T$0.SemanticsFlagL = dart.constFn(dart.legacy(ui.SemanticsFlag)))(),
    JSArrayOfSemanticsNodeUpdate: () => (T$0.JSArrayOfSemanticsNodeUpdate = dart.constFn(_interceptors.JSArray$(_engine.SemanticsNodeUpdate)))(),
    FontStyleL: () => (T$0.FontStyleL = dart.constFn(dart.legacy(ui.FontStyle)))(),
    PlaceholderAlignmentL: () => (T$0.PlaceholderAlignmentL = dart.constFn(dart.legacy(ui.PlaceholderAlignment)))(),
    FontWeightL: () => (T$0.FontWeightL = dart.constFn(dart.legacy(ui.FontWeight)))(),
    TextAlignL: () => (T$0.TextAlignL = dart.constFn(dart.legacy(ui.TextAlign)))(),
    TextBaselineL: () => (T$0.TextBaselineL = dart.constFn(dart.legacy(ui.TextBaseline)))(),
    TextDecorationStyleL: () => (T$0.TextDecorationStyleL = dart.constFn(dart.legacy(ui.TextDecorationStyle)))(),
    CkPaintN: () => (T$0.CkPaintN = dart.constFn(dart.nullable(_engine.CkPaint)))(),
    TextDirectionL: () => (T$0.TextDirectionL = dart.constFn(dart.legacy(ui.TextDirection)))(),
    TextAffinityL: () => (T$0.TextAffinityL = dart.constFn(dart.legacy(ui.TextAffinity)))(),
    BoxHeightStyleL: () => (T$0.BoxHeightStyleL = dart.constFn(dart.legacy(ui.BoxHeightStyle)))(),
    BoxWidthStyleL: () => (T$0.BoxWidthStyleL = dart.constFn(dart.legacy(ui.BoxWidthStyle)))(),
    TileModeL: () => (T$0.TileModeL = dart.constFn(dart.legacy(ui.TileMode)))(),
    BrightnessL: () => (T$0.BrightnessL = dart.constFn(dart.legacy(ui.Brightness)))(),
    CodecTovoid: () => (T$0.CodecTovoid = dart.constFn(dart.fnType(dart.void, [ui.Codec])))(),
    FnToStringN: () => (T$0.FnToStringN = dart.constFn(dart.fnType(T$.StringN(), [T$0.CodecTovoid()])))(),
    boolTodynamic: () => (T$0.boolTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.bool])))(),
    FrameInfoToNull: () => (T$0.FrameInfoToNull = dart.constFn(dart.fnType(core.Null, [ui.FrameInfo])))(),
    voidTodynamic: () => (T$0.voidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.void])))(),
    voidToFutureOrOfvoid: () => (T$0.voidToFutureOrOfvoid = dart.constFn(dart.fnType(dart.void, [dart.void])))(),
    MetaElementN: () => (T$0.MetaElementN = dart.constFn(dart.nullable(html$.MetaElement)))(),
    FutureOfByteData: () => (T$0.FutureOfByteData = dart.constFn(async.Future$(typed_data.ByteData)))(),
    JSArrayOfElement: () => (T$0.JSArrayOfElement = dart.constFn(_interceptors.JSArray$(html$.Element)))(),
    ImageElementN: () => (T$0.ImageElementN = dart.constFn(dart.nullable(html$.ImageElement)))(),
    HtmlElementTovoid: () => (T$0.HtmlElementTovoid = dart.constFn(dart.fnType(dart.void, [html$.HtmlElement])))()
  };
  var T$1 = {
    EngineColorFilterN: () => (T$1.EngineColorFilterN = dart.constFn(dart.nullable(_engine.EngineColorFilter)))(),
    BrowserEngineL: () => (T$1.BrowserEngineL = dart.constFn(dart.legacy(_engine.BrowserEngine)))(),
    OperatingSystemL: () => (T$1.OperatingSystemL = dart.constFn(dart.legacy(_engine.OperatingSystem)))(),
    _CkManagedSkImageFilterConvertibleOfObject: () => (T$1._CkManagedSkImageFilterConvertibleOfObject = dart.constFn(_engine._CkManagedSkImageFilterConvertible$(core.Object)))(),
    JSArrayOfCkPaintCommand: () => (T$1.JSArrayOfCkPaintCommand = dart.constFn(_interceptors.JSArray$(_engine.CkPaintCommand)))(),
    JSArrayOfSkDeletable: () => (T$1.JSArrayOfSkDeletable = dart.constFn(_interceptors.JSArray$(dart.anonymousJSType("SkDeletable"))))(),
    SkDeletableToNull: () => (T$1.SkDeletableToNull = dart.constFn(dart.fnType(core.Null, [dart.anonymousJSType("SkDeletable")])))(),
    IdentityMapOfint$CkPictureRecorder: () => (T$1.IdentityMapOfint$CkPictureRecorder = dart.constFn(_js_helper.IdentityMap$(core.int, _engine.CkPictureRecorder)))(),
    IdentityMapOfint$EmbeddedViewParams: () => (T$1.IdentityMapOfint$EmbeddedViewParams = dart.constFn(_js_helper.IdentityMap$(core.int, _engine.EmbeddedViewParams)))(),
    IdentityMapOfintN$Element: () => (T$1.IdentityMapOfintN$Element = dart.constFn(_js_helper.IdentityMap$(T$.intN(), html$.Element)))(),
    IdentityMapOfintN$ElementN: () => (T$1.IdentityMapOfintN$ElementN = dart.constFn(_js_helper.IdentityMap$(T$.intN(), T$0.ElementN())))(),
    IdentityMapOfint$Surface: () => (T$1.IdentityMapOfint$Surface = dart.constFn(_js_helper.IdentityMap$(core.int, _engine.Surface)))(),
    LinkedHashSetOfint: () => (T$1.LinkedHashSetOfint = dart.constFn(collection.LinkedHashSet$(core.int)))(),
    IdentityMapOfint$int: () => (T$1.IdentityMapOfint$int = dart.constFn(_js_helper.IdentityMap$(core.int, core.int)))(),
    CkCanvasN: () => (T$1.CkCanvasN = dart.constFn(dart.nullable(_engine.CkCanvas)))(),
    JSArrayOfCkCanvasN: () => (T$1.JSArrayOfCkCanvasN = dart.constFn(_interceptors.JSArray$(T$1.CkCanvasN())))(),
    JSArrayOfSurface: () => (T$1.JSArrayOfSurface = dart.constFn(_interceptors.JSArray$(_engine.Surface)))(),
    MutatorTypeL: () => (T$1.MutatorTypeL = dart.constFn(dart.legacy(_engine.MutatorType)))(),
    JSArrayOfMutator: () => (T$1.JSArrayOfMutator = dart.constFn(_interceptors.JSArray$(_engine.Mutator)))(),
    ListOfMutator: () => (T$1.ListOfMutator = dart.constFn(core.List$(_engine.Mutator)))(),
    _RegisteredFontN: () => (T$1._RegisteredFontN = dart.constFn(dart.nullable(_engine._RegisteredFont)))(),
    FutureOf_RegisteredFontN: () => (T$1.FutureOf_RegisteredFontN = dart.constFn(async.Future$(T$1._RegisteredFontN())))(),
    JSArrayOfFutureOf_RegisteredFontN: () => (T$1.JSArrayOfFutureOf_RegisteredFontN = dart.constFn(_interceptors.JSArray$(T$1.FutureOf_RegisteredFontN())))(),
    JSArrayOf_RegisteredFont: () => (T$1.JSArrayOf_RegisteredFont = dart.constFn(_interceptors.JSArray$(_engine._RegisteredFont)))(),
    ListOfSkTypeface: () => (T$1.ListOfSkTypeface = dart.constFn(core.List$(dart.anonymousJSType("SkTypeface"))))(),
    IdentityMapOfString$ListOfSkTypeface: () => (T$1.IdentityMapOfString$ListOfSkTypeface = dart.constFn(_js_helper.IdentityMap$(core.String, T$1.ListOfSkTypeface())))(),
    JSArrayOfSkTypeface: () => (T$1.JSArrayOfSkTypeface = dart.constFn(_interceptors.JSArray$(dart.anonymousJSType("SkTypeface"))))(),
    VoidToListOfSkTypeface: () => (T$1.VoidToListOfSkTypeface = dart.constFn(dart.fnType(T$1.ListOfSkTypeface(), [])))(),
    dynamicToByteBuffer: () => (T$1.dynamicToByteBuffer = dart.constFn(dart.fnType(typed_data.ByteBuffer, [dart.dynamic])))(),
    FutureOfByteBuffer: () => (T$1.FutureOfByteBuffer = dart.constFn(async.Future$(typed_data.ByteBuffer)))(),
    IdentityMapOfString$int: () => (T$1.IdentityMapOfString$int = dart.constFn(_js_helper.IdentityMap$(core.String, core.int)))(),
    ListOfCodeunitRange: () => (T$1.ListOfCodeunitRange = dart.constFn(core.List$(_engine.CodeunitRange)))(),
    LinkedMapOfNotoFont$ListOfCodeunitRange: () => (T$1.LinkedMapOfNotoFont$ListOfCodeunitRange = dart.constFn(_js_helper.LinkedMap$(_engine.NotoFont, T$1.ListOfCodeunitRange())))(),
    JSArrayOfCodeunitRange: () => (T$1.JSArrayOfCodeunitRange = dart.constFn(_interceptors.JSArray$(_engine.CodeunitRange)))(),
    VoidToListOfCodeunitRange: () => (T$1.VoidToListOfCodeunitRange = dart.constFn(dart.fnType(T$1.ListOfCodeunitRange(), [])))(),
    IntervalTreeOfNotoFont: () => (T$1.IntervalTreeOfNotoFont = dart.constFn(_engine.IntervalTree$(_engine.NotoFont)))(),
    CompleterOfvoid: () => (T$1.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))(),
    LinkedHashSetOf_ResolvedNotoSubset: () => (T$1.LinkedHashSetOf_ResolvedNotoSubset = dart.constFn(collection.LinkedHashSet$(_engine._ResolvedNotoSubset)))(),
    IdentityMapOfString$_ResolvedNotoSubset: () => (T$1.IdentityMapOfString$_ResolvedNotoSubset = dart.constFn(_js_helper.IdentityMap$(core.String, _engine._ResolvedNotoSubset)))(),
    IdentityMapOfString$FutureOfvoid: () => (T$1.IdentityMapOfString$FutureOfvoid = dart.constFn(_js_helper.IdentityMap$(core.String, T$.FutureOfvoid())))(),
    IdentityMapOfString$Uint8List: () => (T$1.IdentityMapOfString$Uint8List = dart.constFn(_js_helper.IdentityMap$(core.String, typed_data.Uint8List)))(),
    FutureOrOfByteBuffer: () => (T$1.FutureOrOfByteBuffer = dart.constFn(async.FutureOr$(typed_data.ByteBuffer)))(),
    dynamicToFutureOrOfByteBuffer: () => (T$1.dynamicToFutureOrOfByteBuffer = dart.constFn(dart.fnType(T$1.FutureOrOfByteBuffer(), [dart.dynamic])))(),
    FutureOfFrameInfo: () => (T$1.FutureOfFrameInfo = dart.constFn(async.Future$(ui.FrameInfo)))(),
    SkiaObjectBoxOfCkImage$SkImage: () => (T$1.SkiaObjectBoxOfCkImage$SkImage = dart.constFn(_engine.SkiaObjectBox$(_engine.CkImage, dart.anonymousJSType("SkImage"))))(),
    VoidToSkImage: () => (T$1.VoidToSkImage = dart.constFn(dart.fnType(dart.anonymousJSType("SkImage"), [])))(),
    JSArrayOfLayer: () => (T$1.JSArrayOfLayer = dart.constFn(_interceptors.JSArray$(_engine.Layer)))(),
    CkShaderN: () => (T$1.CkShaderN = dart.constFn(dart.nullable(_engine.CkShader)))(),
    _CkManagedSkImageFilterConvertibleNOfObject: () => (T$1._CkManagedSkImageFilterConvertibleNOfObject = dart.constFn(dart.nullable(T$1._CkManagedSkImageFilterConvertibleOfObject())))(),
    JSArrayOfVoidTovoid: () => (T$1.JSArrayOfVoidTovoid = dart.constFn(_interceptors.JSArray$(T$.VoidTovoid())))(),
    SkiaObjectOfObject: () => (T$1.SkiaObjectOfObject = dart.constFn(_engine.SkiaObject$(core.Object)))(),
    DoubleLinkedQueueOfSkiaObjectOfObject: () => (T$1.DoubleLinkedQueueOfSkiaObjectOfObject = dart.constFn(collection.DoubleLinkedQueue$(T$1.SkiaObjectOfObject())))(),
    DoubleLinkedQueueEntryOfSkiaObjectOfObject: () => (T$1.DoubleLinkedQueueEntryOfSkiaObjectOfObject = dart.constFn(collection.DoubleLinkedQueueEntry$(T$1.SkiaObjectOfObject())))(),
    LinkedMapOfSkiaObjectOfObject$DoubleLinkedQueueEntryOfSkiaObjectOfObject: () => (T$1.LinkedMapOfSkiaObjectOfObject$DoubleLinkedQueueEntryOfSkiaObjectOfObject = dart.constFn(_js_helper.LinkedMap$(T$1.SkiaObjectOfObject(), T$1.DoubleLinkedQueueEntryOfSkiaObjectOfObject())))(),
    ManagedSkiaObjectOfObject: () => (T$1.ManagedSkiaObjectOfObject = dart.constFn(_engine.ManagedSkiaObject$(core.Object)))(),
    JSArrayOfManagedSkiaObjectOfObject: () => (T$1.JSArrayOfManagedSkiaObjectOfObject = dart.constFn(_interceptors.JSArray$(T$1.ManagedSkiaObjectOfObject())))(),
    JSArrayOfSkiaObjectCache: () => (T$1.JSArrayOfSkiaObjectCache = dart.constFn(_interceptors.JSArray$(_engine.SkiaObjectCache)))(),
    SurfaceFrameAndCkCanvasTobool: () => (T$1.SurfaceFrameAndCkCanvasTobool = dart.constFn(dart.fnType(core.bool, [_engine.SurfaceFrame, _engine.CkCanvas])))(),
    JSArrayOfSkTextShadow: () => (T$1.JSArrayOfSkTextShadow = dart.constFn(_interceptors.JSArray$(dart.anonymousJSType("SkTextShadow"))))(),
    JSArrayOfSkFontFeature: () => (T$1.JSArrayOfSkFontFeature = dart.constFn(_interceptors.JSArray$(dart.anonymousJSType("SkFontFeature"))))(),
    VoidToSkTextStyle: () => (T$1.VoidToSkTextStyle = dart.constFn(dart.fnType(dart.lazyJSType(() => dart.global.SkTextStyle, "SkTextStyle"), [])))(),
    TextBoxL: () => (T$1.TextBoxL = dart.constFn(dart.legacy(ui.TextBox)))(),
    JSArrayOfTextBox: () => (T$1.JSArrayOfTextBox = dart.constFn(_interceptors.JSArray$(ui.TextBox)))(),
    JSArrayOf_ParagraphCommand: () => (T$1.JSArrayOf_ParagraphCommand = dart.constFn(_interceptors.JSArray$(_engine._ParagraphCommand)))(),
    JSArrayOfdouble: () => (T$1.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    JSArrayOfCkTextStyle: () => (T$1.JSArrayOfCkTextStyle = dart.constFn(_interceptors.JSArray$(_engine.CkTextStyle)))(),
    ListOfbool: () => (T$1.ListOfbool = dart.constFn(core.List$(core.bool)))(),
    boolTobool: () => (T$1.boolTobool = dart.constFn(dart.fnType(core.bool, [core.bool])))(),
    intTobool: () => (T$1.intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))(),
    _ParagraphCommandTypeL: () => (T$1._ParagraphCommandTypeL = dart.constFn(dart.legacy(_engine._ParagraphCommandType)))(),
    JSArrayOfCanvasElement: () => (T$1.JSArrayOfCanvasElement = dart.constFn(_interceptors.JSArray$(html$.CanvasElement)))(),
    JSArrayOf_SaveStackEntry: () => (T$1.JSArrayOf_SaveStackEntry = dart.constFn(_interceptors.JSArray$(_engine._SaveStackEntry)))(),
    ListOf_SaveClipEntry: () => (T$1.ListOf_SaveClipEntry = dart.constFn(core.List$(_engine._SaveClipEntry)))(),
    JSArrayOf_SaveClipEntry: () => (T$1.JSArrayOf_SaveClipEntry = dart.constFn(_interceptors.JSArray$(_engine._SaveClipEntry)))(),
    StringToNull: () => (T$1.StringToNull = dart.constFn(dart.fnType(core.Null, [core.String])))(),
    JSArrayOf_SaveElementStackEntry: () => (T$1.JSArrayOf_SaveElementStackEntry = dart.constFn(_interceptors.JSArray$(_engine._SaveElementStackEntry)))(),
    ListOfElementN: () => (T$1.ListOfElementN = dart.constFn(core.List$(T$0.ElementN())))(),
    ListNOfElementN: () => (T$1.ListNOfElementN = dart.constFn(dart.nullable(T$1.ListOfElementN())))(),
    JSArrayOfElementN: () => (T$1.JSArrayOfElementN = dart.constFn(_interceptors.JSArray$(T$0.ElementN())))(),
    CompleterOfbool: () => (T$1.CompleterOfbool = dart.constFn(async.Completer$(core.bool)))(),
    EventTodynamic: () => (T$1.EventTodynamic = dart.constFn(dart.fnType(dart.dynamic, [html$.Event])))(),
    IdentityMapOfString$bool: () => (T$1.IdentityMapOfString$bool = dart.constFn(_js_helper.IdentityMap$(core.String, core.bool)))(),
    VoidToFn$1: () => (T$1.VoidToFn$1 = dart.constFn(dart.fnType(T$.VoidTovoid(), [])))(),
    FnTodynamic$1: () => (T$1.FnTodynamic$1 = dart.constFn(dart.fnType(dart.dynamic, [T$.VoidTovoid()])))(),
    JSArrayOfPersistedSurface: () => (T$1.JSArrayOfPersistedSurface = dart.constFn(_interceptors.JSArray$(_engine.PersistedSurface)))(),
    PersistedContainerSurfaceN: () => (T$1.PersistedContainerSurfaceN = dart.constFn(dart.nullable(_engine.PersistedContainerSurface)))(),
    PersistedSurfaceN: () => (T$1.PersistedSurfaceN = dart.constFn(dart.nullable(_engine.PersistedSurface)))(),
    JSArrayOfPersistedSurfaceN: () => (T$1.JSArrayOfPersistedSurfaceN = dart.constFn(_interceptors.JSArray$(T$1.PersistedSurfaceN())))(),
    PersistedSurfaceL: () => (T$1.PersistedSurfaceL = dart.constFn(dart.legacy(_engine.PersistedSurface)))(),
    JSArrayOf_PersistedSurfaceMatch: () => (T$1.JSArrayOf_PersistedSurfaceMatch = dart.constFn(_interceptors.JSArray$(_engine._PersistedSurfaceMatch)))(),
    _PersistedSurfaceMatchAnd_PersistedSurfaceMatchToint: () => (T$1._PersistedSurfaceMatchAnd_PersistedSurfaceMatchToint = dart.constFn(dart.fnType(core.int, [_engine._PersistedSurfaceMatch, _engine._PersistedSurfaceMatch])))(),
    LinkedMapOfPersistedSurfaceN$PersistedSurface: () => (T$1.LinkedMapOfPersistedSurfaceN$PersistedSurface = dart.constFn(_js_helper.LinkedMap$(T$1.PersistedSurfaceN(), _engine.PersistedSurface)))(),
    LinkedHashSetOfPersistedSurface: () => (T$1.LinkedHashSetOfPersistedSurface = dart.constFn(collection.LinkedHashSet$(_engine.PersistedSurface)))(),
    FrameReferenceOfPersistedSurface: () => (T$1.FrameReferenceOfPersistedSurface = dart.constFn(_engine.FrameReference$(_engine.PersistedSurface)))(),
    JSArrayOfOffset: () => (T$1.JSArrayOfOffset = dart.constFn(_interceptors.JSArray$(ui.Offset)))(),
    OffsetL: () => (T$1.OffsetL = dart.constFn(dart.legacy(ui.Offset)))(),
    JSArrayOfConic: () => (T$1.JSArrayOfConic = dart.constFn(_interceptors.JSArray$(_engine.Conic)))(),
    JSArrayOf_PathContourMeasure: () => (T$1.JSArrayOf_PathContourMeasure = dart.constFn(_interceptors.JSArray$(_engine._PathContourMeasure)))(),
    JSArrayOf_PathSegment: () => (T$1.JSArrayOf_PathSegment = dart.constFn(_interceptors.JSArray$(_engine._PathSegment)))(),
    doubleAnddoubleAnddouble__ToNull: () => (T$1.doubleAnddoubleAnddouble__ToNull = dart.constFn(dart.fnType(core.Null, [core.double, core.double, core.double, core.double])))(),
    JSArrayOfRadius: () => (T$1.JSArrayOfRadius = dart.constFn(_interceptors.JSArray$(ui.Radius)))(),
    DirChangeL: () => (T$1.DirChangeL = dart.constFn(dart.legacy(_engine.DirChange)))(),
    CrossFrameCacheOfHtmlElement: () => (T$1.CrossFrameCacheOfHtmlElement = dart.constFn(_engine.CrossFrameCache$(html$.HtmlElement)))(),
    BitmapCanvasN: () => (T$1.BitmapCanvasN = dart.constFn(dart.nullable(_engine.BitmapCanvas)))(),
    JSArrayOfPaintCommand: () => (T$1.JSArrayOfPaintCommand = dart.constFn(_interceptors.JSArray$(_engine.PaintCommand)))(),
    JSArrayOfPathCommand: () => (T$1.JSArrayOfPathCommand = dart.constFn(_interceptors.JSArray$(_engine.PathCommand)))(),
    JSArrayOfMatrix4: () => (T$1.JSArrayOfMatrix4 = dart.constFn(_interceptors.JSArray$(_engine.Matrix4)))(),
    RectN: () => (T$1.RectN = dart.constFn(dart.nullable(ui.Rect)))(),
    JSArrayOfRectN: () => (T$1.JSArrayOfRectN = dart.constFn(_interceptors.JSArray$(T$1.RectN())))(),
    _GlProgramN: () => (T$1._GlProgramN = dart.constFn(dart.nullable(_engine._GlProgram)))(),
    IdentityMapOfString$_GlProgramN: () => (T$1.IdentityMapOfString$_GlProgramN = dart.constFn(_js_helper.IdentityMap$(core.String, T$1._GlProgramN())))(),
    JSArrayOfPersistedContainerSurface: () => (T$1.JSArrayOfPersistedContainerSurface = dart.constFn(_interceptors.JSArray$(_engine.PersistedContainerSurface)))(),
    PersistedOffsetN: () => (T$1.PersistedOffsetN = dart.constFn(dart.nullable(_engine.PersistedOffset)))(),
    PersistedTransformN: () => (T$1.PersistedTransformN = dart.constFn(dart.nullable(_engine.PersistedTransform)))(),
    PersistedClipRectN: () => (T$1.PersistedClipRectN = dart.constFn(dart.nullable(_engine.PersistedClipRect)))(),
    PersistedClipPathN: () => (T$1.PersistedClipPathN = dart.constFn(dart.nullable(_engine.PersistedClipPath)))(),
    PersistedOpacityN: () => (T$1.PersistedOpacityN = dart.constFn(dart.nullable(_engine.PersistedOpacity)))(),
    PersistedColorFilterN: () => (T$1.PersistedColorFilterN = dart.constFn(dart.nullable(_engine.PersistedColorFilter)))(),
    PersistedImageFilterN: () => (T$1.PersistedImageFilterN = dart.constFn(dart.nullable(_engine.PersistedImageFilter)))(),
    PersistedBackdropFilterN: () => (T$1.PersistedBackdropFilterN = dart.constFn(dart.nullable(_engine.PersistedBackdropFilter)))(),
    PersistedPhysicalShapeN: () => (T$1.PersistedPhysicalShapeN = dart.constFn(dart.nullable(_engine.PersistedPhysicalShape)))(),
    VoidToSurfaceScene: () => (T$1.VoidToSurfaceScene = dart.constFn(dart.fnType(_engine.SurfaceScene, [])))(),
    JSArrayOfShaderDeclaration: () => (T$1.JSArrayOfShaderDeclaration = dart.constFn(_interceptors.JSArray$(_engine.ShaderDeclaration)))(),
    JSArrayOfShaderMethod: () => (T$1.JSArrayOfShaderMethod = dart.constFn(_interceptors.JSArray$(_engine.ShaderMethod)))(),
    PersistedSurfaceStateL: () => (T$1.PersistedSurfaceStateL = dart.constFn(dart.legacy(_engine.PersistedSurfaceState)))(),
    CompleterOfFrameInfo: () => (T$1.CompleterOfFrameInfo = dart.constFn(async.Completer$(ui.FrameInfo)))(),
    StreamSubscriptionOfEvent: () => (T$1.StreamSubscriptionOfEvent = dart.constFn(async.StreamSubscription$(html$.Event)))(),
    VoidToStreamSubscriptionOfEvent: () => (T$1.VoidToStreamSubscriptionOfEvent = dart.constFn(dart.fnType(T$1.StreamSubscriptionOfEvent(), [])))(),
    StreamSubscriptionOfEventTodynamic: () => (T$1.StreamSubscriptionOfEventTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$1.StreamSubscriptionOfEvent()])))(),
    FutureOfByteDataN: () => (T$1.FutureOfByteDataN = dart.constFn(async.Future$(T$0.ByteDataN())))(),
    IdentityMapOfString$Timer: () => (T$1.IdentityMapOfString$Timer = dart.constFn(_js_helper.IdentityMap$(core.String, async.Timer)))(),
    CompleterOfImage: () => (T$1.CompleterOfImage = dart.constFn(async.Completer$(ui.Image)))(),
    LinkedMapOfObject$FlutterWindow: () => (T$1.LinkedMapOfObject$FlutterWindow = dart.constFn(_js_helper.LinkedMap$(core.Object, ui.FlutterWindow)))(),
    LinkedMapOfObject$ViewConfiguration: () => (T$1.LinkedMapOfObject$ViewConfiguration = dart.constFn(_js_helper.LinkedMap$(core.Object, ui.ViewConfiguration)))(),
    ListOfFrameTiming: () => (T$1.ListOfFrameTiming = dart.constFn(core.List$(ui.FrameTiming)))(),
    ByteDataToNull: () => (T$1.ByteDataToNull = dart.constFn(dart.fnType(core.Null, [typed_data.ByteData])))(),
    JSArrayOfLocale: () => (T$1.JSArrayOfLocale = dart.constFn(_interceptors.JSArray$(ui.Locale)))(),
    StringAndFnTovoid: () => (T$1.StringAndFnTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$1.EventTodynamic()])))(),
    IdentityMapOfString$EventTodynamic: () => (T$1.IdentityMapOfString$EventTodynamic = dart.constFn(_js_helper.IdentityMap$(core.String, T$1.EventTodynamic())))(),
    JSArrayOfPointerData: () => (T$1.JSArrayOfPointerData = dart.constFn(_interceptors.JSArray$(ui.PointerData)))(),
    IdentityMapOfint$_ButtonSanitizer: () => (T$1.IdentityMapOfint$_ButtonSanitizer = dart.constFn(_js_helper.IdentityMap$(core.int, _engine._ButtonSanitizer)))(),
    VoidTo_ButtonSanitizer: () => (T$1.VoidTo_ButtonSanitizer = dart.constFn(dart.fnType(_engine._ButtonSanitizer, [])))(),
    PointerEventToNull: () => (T$1.PointerEventToNull = dart.constFn(dart.fnType(core.Null, [html$.PointerEvent])))(),
    PointerEventTo_SanitizedDetails: () => (T$1.PointerEventTo_SanitizedDetails = dart.constFn(dart.fnType(_engine._SanitizedDetails, [html$.PointerEvent])))(),
    JSArrayOfPointerEvent: () => (T$1.JSArrayOfPointerEvent = dart.constFn(_interceptors.JSArray$(html$.PointerEvent)))(),
    TouchEventToNull: () => (T$1.TouchEventToNull = dart.constFn(dart.fnType(core.Null, [html$.TouchEvent])))(),
    MouseEventToNull: () => (T$1.MouseEventToNull = dart.constFn(dart.fnType(core.Null, [html$.MouseEvent])))(),
    IdentityMapOfint$_PointerState: () => (T$1.IdentityMapOfint$_PointerState = dart.constFn(_js_helper.IdentityMap$(core.int, _engine._PointerState)))(),
    VoidTo_PointerState: () => (T$1.VoidTo_PointerState = dart.constFn(dart.fnType(_engine._PointerState, [])))(),
    StringAnddoubleTovoid: () => (T$1.StringAnddoubleTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.double])))(),
    StringAnddoubleToNvoid: () => (T$1.StringAnddoubleToNvoid = dart.constFn(dart.nullable(T$1.StringAnddoubleTovoid())))(),
    MapEntryOfString$int: () => (T$1.MapEntryOfString$int = dart.constFn(core.MapEntry$(core.String, core.int)))(),
    MapEntryOfString$intAndMapEntryOfString$intToint: () => (T$1.MapEntryOfString$intAndMapEntryOfString$intToint = dart.constFn(dart.fnType(core.int, [T$1.MapEntryOfString$int(), T$1.MapEntryOfString$int()])))(),
    _CheckableKindL: () => (T$1._CheckableKindL = dart.constFn(dart.legacy(_engine._CheckableKind)))(),
    GestureModeTovoid: () => (T$1.GestureModeTovoid = dart.constFn(dart.fnType(dart.void, [_engine.GestureMode])))(),
    RoleL: () => (T$1.RoleL = dart.constFn(dart.legacy(_engine.Role)))(),
    RoleManagerN: () => (T$1.RoleManagerN = dart.constFn(dart.nullable(_engine.RoleManager)))(),
    LinkedMapOfRole$RoleManagerN: () => (T$1.LinkedMapOfRole$RoleManagerN = dart.constFn(_js_helper.LinkedMap$(_engine.Role, T$1.RoleManagerN())))(),
    VoidToMatrix4: () => (T$1.VoidToMatrix4 = dart.constFn(dart.fnType(_engine.Matrix4, [])))(),
    Matrix4Todynamic: () => (T$1.Matrix4Todynamic = dart.constFn(dart.fnType(dart.dynamic, [_engine.Matrix4])))(),
    AccessibilityModeL: () => (T$1.AccessibilityModeL = dart.constFn(dart.legacy(_engine.AccessibilityMode)))(),
    GestureModeL: () => (T$1.GestureModeL = dart.constFn(dart.legacy(_engine.GestureMode)))(),
    SemanticsObjectN: () => (T$1.SemanticsObjectN = dart.constFn(dart.nullable(_engine.SemanticsObject)))(),
    IdentityMapOfintN$SemanticsObjectN: () => (T$1.IdentityMapOfintN$SemanticsObjectN = dart.constFn(_js_helper.IdentityMap$(T$.intN(), T$1.SemanticsObjectN())))(),
    IdentityMapOfintN$SemanticsObject: () => (T$1.IdentityMapOfintN$SemanticsObject = dart.constFn(_js_helper.IdentityMap$(T$.intN(), _engine.SemanticsObject)))(),
    JSArrayOfSemanticsObjectN: () => (T$1.JSArrayOfSemanticsObjectN = dart.constFn(_interceptors.JSArray$(T$1.SemanticsObjectN())))(),
    VoidToDateTime: () => (T$1.VoidToDateTime = dart.constFn(dart.fnType(core.DateTime, [])))(),
    GestureModeToNvoid: () => (T$1.GestureModeToNvoid = dart.constFn(dart.nullable(T$1.GestureModeTovoid())))(),
    JSArrayOfGestureModeToNvoid: () => (T$1.JSArrayOfGestureModeToNvoid = dart.constFn(_interceptors.JSArray$(T$1.GestureModeToNvoid())))(),
    intNAndSemanticsObjectNTovoid: () => (T$1.intNAndSemanticsObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.intN(), T$1.SemanticsObjectN()])))(),
    EnabledStateL: () => (T$1.EnabledStateL = dart.constFn(dart.legacy(_engine.EnabledState)))(),
    JSArrayOfStreamSubscriptionOfEvent: () => (T$1.JSArrayOfStreamSubscriptionOfEvent = dart.constFn(_interceptors.JSArray$(T$1.StreamSubscriptionOfEvent())))(),
    MouseEventTovoid: () => (T$1.MouseEventTovoid = dart.constFn(dart.fnType(dart.void, [html$.MouseEvent])))(),
    JSArrayOfEventTodynamic: () => (T$1.JSArrayOfEventTodynamic = dart.constFn(_interceptors.JSArray$(T$1.EventTodynamic())))(),
    JSArrayOfTestHistoryEntry: () => (T$1.JSArrayOfTestHistoryEntry = dart.constFn(_interceptors.JSArray$(_engine.TestHistoryEntry)))(),
    voidTovoid: () => (T$1.voidTovoid = dart.constFn(dart.fnType(dart.void, [dart.void])))(),
    JSArrayOfFutureOfvoid: () => (T$1.JSArrayOfFutureOfvoid = dart.constFn(_interceptors.JSArray$(T$.FutureOfvoid())))(),
    FontFaceToNull: () => (T$1.FontFaceToNull = dart.constFn(dart.fnType(core.Null, [html$.FontFace])))(),
    dynamicToNever: () => (T$1.dynamicToNever = dart.constFn(dart.fnType(dart.Never, [dart.dynamic])))(),
    DateTimeTodynamic: () => (T$1.DateTimeTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.DateTime])))(),
    IdentityMapOfString$StringN: () => (T$1.IdentityMapOfString$StringN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.StringN())))(),
    JSArrayOfEngineLineMetrics: () => (T$1.JSArrayOfEngineLineMetrics = dart.constFn(_interceptors.JSArray$(_engine.EngineLineMetrics)))(),
    JSArrayOfLineSegment: () => (T$1.JSArrayOfLineSegment = dart.constFn(_interceptors.JSArray$(_engine.LineSegment)))(),
    JSArrayOfRangeBox: () => (T$1.JSArrayOfRangeBox = dart.constFn(_interceptors.JSArray$(_engine.RangeBox)))(),
    TextHeightStyleAndTextHeightRulerTovoid: () => (T$1.TextHeightStyleAndTextHeightRulerTovoid = dart.constFn(dart.fnType(dart.void, [_engine.TextHeightStyle, _engine.TextHeightRuler])))(),
    LinkedMapOfTextHeightStyle$TextHeightRuler: () => (T$1.LinkedMapOfTextHeightStyle$TextHeightRuler = dart.constFn(_js_helper.LinkedMap$(_engine.TextHeightStyle, _engine.TextHeightRuler)))(),
    LineCharPropertyL: () => (T$1.LineCharPropertyL = dart.constFn(dart.legacy(_engine.LineCharProperty)))(),
    LineBreakTypeL: () => (T$1.LineBreakTypeL = dart.constFn(dart.legacy(_engine.LineBreakType)))(),
    LinkedMapOfParagraphGeometricStyle$ParagraphRuler: () => (T$1.LinkedMapOfParagraphGeometricStyle$ParagraphRuler = dart.constFn(_js_helper.LinkedMap$(_engine.ParagraphGeometricStyle, _engine.ParagraphRuler)))(),
    ParagraphGeometricStyleAndParagraphRulerTovoid: () => (T$1.ParagraphGeometricStyleAndParagraphRulerTovoid = dart.constFn(dart.fnType(dart.void, [_engine.ParagraphGeometricStyle, _engine.ParagraphRuler])))(),
    ParagraphRulerAndParagraphRulerToint: () => (T$1.ParagraphRulerAndParagraphRulerToint = dart.constFn(dart.fnType(core.int, [_engine.ParagraphRuler, _engine.ParagraphRuler])))(),
    SurfacePaintN: () => (T$1.SurfacePaintN = dart.constFn(dart.nullable(_engine.SurfacePaint)))(),
    VoidToStopwatch: () => (T$1.VoidToStopwatch = dart.constFn(dart.fnType(core.Stopwatch, [])))(),
    StopwatchTodynamic: () => (T$1.StopwatchTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Stopwatch])))(),
    EngineStrutStyleN: () => (T$1.EngineStrutStyleN = dart.constFn(dart.nullable(_engine.EngineStrutStyle)))(),
    VoidToHtmlElement: () => (T$1.VoidToHtmlElement = dart.constFn(dart.fnType(html$.HtmlElement, [])))(),
    HtmlElementTodynamic: () => (T$1.HtmlElementTodynamic = dart.constFn(dart.fnType(dart.dynamic, [html$.HtmlElement])))(),
    JSArrayOfParagraphSpan: () => (T$1.JSArrayOfParagraphSpan = dart.constFn(_interceptors.JSArray$(_engine.ParagraphSpan)))(),
    JSArrayOfStyleNode: () => (T$1.JSArrayOfStyleNode = dart.constFn(_interceptors.JSArray$(_engine.StyleNode)))(),
    MeasurementResultN: () => (T$1.MeasurementResultN = dart.constFn(dart.nullable(_engine.MeasurementResult)))(),
    ListOfMeasurementResultN: () => (T$1.ListOfMeasurementResultN = dart.constFn(core.List$(T$1.MeasurementResultN())))(),
    IdentityMapOfStringN$ListOfMeasurementResultN: () => (T$1.IdentityMapOfStringN$ListOfMeasurementResultN = dart.constFn(_js_helper.IdentityMap$(T$.StringN(), T$1.ListOfMeasurementResultN())))(),
    JSArrayOfNode$1: () => (T$1.JSArrayOfNode$1 = dart.constFn(_interceptors.JSArray$(html$.Node)))(),
    JSArrayOfMeasurementResultN: () => (T$1.JSArrayOfMeasurementResultN = dart.constFn(_interceptors.JSArray$(T$1.MeasurementResultN())))(),
    _ComparisonResultL: () => (T$1._ComparisonResultL = dart.constFn(dart.legacy(_engine._ComparisonResult)))(),
    WordCharPropertyL: () => (T$1.WordCharPropertyL = dart.constFn(dart.legacy(_engine.WordCharProperty)))(),
    TextCapitalizationL: () => (T$1.TextCapitalizationL = dart.constFn(dart.legacy(_engine.TextCapitalization)))(),
    IdentityMapOfString$HtmlElement: () => (T$1.IdentityMapOfString$HtmlElement = dart.constFn(_js_helper.IdentityMap$(core.String, html$.HtmlElement)))(),
    IdentityMapOfString$AutofillInfo: () => (T$1.IdentityMapOfString$AutofillInfo = dart.constFn(_js_helper.IdentityMap$(core.String, _engine.AutofillInfo)))(),
    HtmlElementN: () => (T$1.HtmlElementN = dart.constFn(dart.nullable(html$.HtmlElement)))(),
    IdentityMapOfStringN$dynamic: () => (T$1.IdentityMapOfStringN$dynamic = dart.constFn(_js_helper.IdentityMap$(T$.StringN(), dart.dynamic)))(),
    KeyboardEventTovoid: () => (T$1.KeyboardEventTovoid = dart.constFn(dart.fnType(dart.void, [html$.KeyboardEvent])))(),
    StringAndFormElementTovoid: () => (T$1.StringAndFormElementTovoid = dart.constFn(dart.fnType(dart.void, [core.String, html$.FormElement])))(),
    EditingStateN: () => (T$1.EditingStateN = dart.constFn(dart.nullable(_engine.EditingState)))(),
    EditingStateNTovoid: () => (T$1.EditingStateNTovoid = dart.constFn(dart.fnType(dart.void, [T$1.EditingStateN()])))(),
    StringNTovoid: () => (T$1.StringNTovoid = dart.constFn(dart.fnType(dart.void, [T$.StringN()])))(),
    doubleN: () => (T$1.doubleN = dart.constFn(dart.nullable(core.double)))(),
    ListOfdouble: () => (T$1.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    TransformKindL: () => (T$1.TransformKindL = dart.constFn(dart.legacy(_engine.TransformKind)))(),
    JsUrlStrategyNTovoid: () => (T$1.JsUrlStrategyNTovoid = dart.constFn(dart.fnType(dart.void, [dart.nullable(dart.anonymousJSType("JsUrlStrategy"))])))(),
    LinkedHashSetOfNotoFont: () => (T$1.LinkedHashSetOfNotoFont = dart.constFn(collection.LinkedHashSet$(_engine.NotoFont)))(),
    JSArrayOf_ResolvedNotoSubset: () => (T$1.JSArrayOf_ResolvedNotoSubset = dart.constFn(_interceptors.JSArray$(_engine._ResolvedNotoSubset)))(),
    LinkedMapOf_ResolvedNotoSubset$ListOfCodeunitRange: () => (T$1.LinkedMapOf_ResolvedNotoSubset$ListOfCodeunitRange = dart.constFn(_js_helper.LinkedMap$(_engine._ResolvedNotoSubset, T$1.ListOfCodeunitRange())))(),
    IntervalTreeOf_ResolvedNotoSubset: () => (T$1.IntervalTreeOf_ResolvedNotoSubset = dart.constFn(_engine.IntervalTree$(_engine._ResolvedNotoSubset)))(),
    StringToStringN: () => (T$1.StringToStringN = dart.constFn(dart.fnType(T$.StringN(), [core.String])))(),
    CodeunitRangeL: () => (T$1.CodeunitRangeL = dart.constFn(dart.legacy(_engine.CodeunitRange)))(),
    JSArrayOfNotoFont: () => (T$1.JSArrayOfNotoFont = dart.constFn(_interceptors.JSArray$(_engine.NotoFont)))(),
    NotoFontTobool: () => (T$1.NotoFontTobool = dart.constFn(dart.fnType(core.bool, [_engine.NotoFont])))(),
    VoidToHttpRequest: () => (T$1.VoidToHttpRequest = dart.constFn(dart.fnType(html$.HttpRequest, [])))(),
    CompleterOfCodec: () => (T$1.CompleterOfCodec = dart.constFn(async.Completer$(ui.Codec)))(),
    CanvasKitTovoid: () => (T$1.CanvasKitTovoid = dart.constFn(dart.fnType(dart.void, [dart.anonymousJSType("CanvasKit")])))(),
    _PaintRequestAnd_PaintRequestToint: () => (T$1._PaintRequestAnd_PaintRequestToint = dart.constFn(dart.fnType(core.int, [_engine._PaintRequest, _engine._PaintRequest])))(),
    JSArrayOf_PaintRequest: () => (T$1.JSArrayOf_PaintRequest = dart.constFn(_interceptors.JSArray$(_engine._PaintRequest)))(),
    JSArrayOfFrameReference: () => (T$1.JSArrayOfFrameReference = dart.constFn(_interceptors.JSArray$(_engine.FrameReference)))(),
    LinkedMapOfPersistedSurface$_DebugSurfaceStats: () => (T$1.LinkedMapOfPersistedSurface$_DebugSurfaceStats = dart.constFn(_js_helper.LinkedMap$(_engine.PersistedSurface, _engine._DebugSurfaceStats)))(),
    PersistedSurfaceStateN: () => (T$1.PersistedSurfaceStateN = dart.constFn(dart.nullable(_engine.PersistedSurfaceState)))(),
    JSArrayOfPersistedSurfaceStateN: () => (T$1.JSArrayOfPersistedSurfaceStateN = dart.constFn(_interceptors.JSArray$(T$1.PersistedSurfaceStateN())))(),
    VoidTo_DebugSurfaceStats: () => (T$1.VoidTo_DebugSurfaceStats = dart.constFn(dart.fnType(_engine._DebugSurfaceStats, [])))(),
    PersistedSurfaceTovoid: () => (T$1.PersistedSurfaceTovoid = dart.constFn(dart.fnType(dart.void, [_engine.PersistedSurface])))(),
    CanvasElementToint: () => (T$1.CanvasElementToint = dart.constFn(dart.fnType(core.int, [html$.CanvasElement])))(),
    JSArrayOfFrameTiming: () => (T$1.JSArrayOfFrameTiming = dart.constFn(_interceptors.JSArray$(ui.FrameTiming)))(),
    VoidToNever: () => (T$1.VoidToNever = dart.constFn(dart.fnType(dart.Never, [])))(),
    JSArrayOfSkFontSlant: () => (T$1.JSArrayOfSkFontSlant = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.window.flutterCanvasKit.FontSlant, "window.flutterCanvasKit.FontSlant"))))(),
    JSArrayOfSkFontWeight: () => (T$1.JSArrayOfSkFontWeight = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkFontWeight, "SkFontWeight"))))(),
    JSArrayOfSkAffinity: () => (T$1.JSArrayOfSkAffinity = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkAffinity, "SkAffinity"))))(),
    JSArrayOfSkTextDirection: () => (T$1.JSArrayOfSkTextDirection = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkTextDirection, "SkTextDirection"))))(),
    JSArrayOfSkTextAlign: () => (T$1.JSArrayOfSkTextAlign = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkTextAlign, "SkTextAlign"))))(),
    JSArrayOfSkRectHeightStyle: () => (T$1.JSArrayOfSkRectHeightStyle = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkRectHeightStyle, "SkRectHeightStyle"))))(),
    JSArrayOfSkRectWidthStyle: () => (T$1.JSArrayOfSkRectWidthStyle = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkRectWidthStyle, "SkRectWidthStyle"))))(),
    JSArrayOfSkVertexMode: () => (T$1.JSArrayOfSkVertexMode = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkVertexMode, "SkVertexMode"))))(),
    JSArrayOfSkPointMode: () => (T$1.JSArrayOfSkPointMode = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkPointMode, "SkPointMode"))))(),
    JSArrayOfSkClipOp: () => (T$1.JSArrayOfSkClipOp = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkClipOp, "SkClipOp"))))(),
    JSArrayOfSkFillType: () => (T$1.JSArrayOfSkFillType = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkFillType, "SkFillType"))))(),
    JSArrayOfSkPathOp: () => (T$1.JSArrayOfSkPathOp = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkPathOp, "SkPathOp"))))(),
    JSArrayOfSkBlurStyle: () => (T$1.JSArrayOfSkBlurStyle = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkBlurStyle, "SkBlurStyle"))))(),
    JSArrayOfSkStrokeCap: () => (T$1.JSArrayOfSkStrokeCap = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkStrokeCap, "SkStrokeCap"))))(),
    JSArrayOfSkPaintStyle: () => (T$1.JSArrayOfSkPaintStyle = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkPaintStyle, "SkPaintStyle"))))(),
    JSArrayOfSkBlendMode: () => (T$1.JSArrayOfSkBlendMode = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkBlendMode, "SkBlendMode"))))(),
    JSArrayOfSkStrokeJoin: () => (T$1.JSArrayOfSkStrokeJoin = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkStrokeJoin, "SkStrokeJoin"))))(),
    JSArrayOfSkFilterQuality: () => (T$1.JSArrayOfSkFilterQuality = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkFilterQuality, "SkFilterQuality"))))(),
    JSArrayOfSkTileMode: () => (T$1.JSArrayOfSkTileMode = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkTileMode, "SkTileMode"))))(),
    JSArrayOfSkTextDecorationStyle: () => (T$1.JSArrayOfSkTextDecorationStyle = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkTextDecorationStyle, "SkTextDecorationStyle"))))(),
    JSArrayOfSkTextBaseline: () => (T$1.JSArrayOfSkTextBaseline = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkTextBaseline, "SkTextBaseline"))))(),
    JSArrayOfSkPlaceholderAlignment: () => (T$1.JSArrayOfSkPlaceholderAlignment = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkPlaceholderAlignment, "SkPlaceholderAlignment"))))(),
    JSArrayOfBitmapCanvas: () => (T$1.JSArrayOfBitmapCanvas = dart.constFn(_interceptors.JSArray$(_engine.BitmapCanvas)))(),
    MapOfPersistedSurface$_DebugSurfaceStats: () => (T$1.MapOfPersistedSurface$_DebugSurfaceStats = dart.constFn(core.Map$(_engine.PersistedSurface, _engine._DebugSurfaceStats)))(),
    JSArrayOfMapOfPersistedSurface$_DebugSurfaceStats: () => (T$1.JSArrayOfMapOfPersistedSurface$_DebugSurfaceStats = dart.constFn(_interceptors.JSArray$(T$1.MapOfPersistedSurface$_DebugSurfaceStats())))(),
    JSArrayOf_LogMessage: () => (T$1.JSArrayOf_LogMessage = dart.constFn(_interceptors.JSArray$(_engine._LogMessage)))(),
    SemanticsObjectToIncrementable: () => (T$1.SemanticsObjectToIncrementable = dart.constFn(dart.fnType(_engine.Incrementable, [_engine.SemanticsObject])))(),
    SemanticsObjectToScrollable: () => (T$1.SemanticsObjectToScrollable = dart.constFn(dart.fnType(_engine.Scrollable, [_engine.SemanticsObject])))(),
    SemanticsObjectToLabelAndValue: () => (T$1.SemanticsObjectToLabelAndValue = dart.constFn(dart.fnType(_engine.LabelAndValue, [_engine.SemanticsObject])))(),
    SemanticsObjectToTappable: () => (T$1.SemanticsObjectToTappable = dart.constFn(dart.fnType(_engine.Tappable, [_engine.SemanticsObject])))(),
    SemanticsObjectToTextField: () => (T$1.SemanticsObjectToTextField = dart.constFn(dart.fnType(_engine.TextField, [_engine.SemanticsObject])))(),
    SemanticsObjectToCheckable: () => (T$1.SemanticsObjectToCheckable = dart.constFn(dart.fnType(_engine.Checkable, [_engine.SemanticsObject])))(),
    SemanticsObjectToImageRoleManager: () => (T$1.SemanticsObjectToImageRoleManager = dart.constFn(dart.fnType(_engine.ImageRoleManager, [_engine.SemanticsObject])))(),
    SemanticsObjectToLiveRegion: () => (T$1.SemanticsObjectToLiveRegion = dart.constFn(dart.fnType(_engine.LiveRegion, [_engine.SemanticsObject])))(),
    SemanticsObjectToRoleManager: () => (T$1.SemanticsObjectToRoleManager = dart.constFn(dart.fnType(_engine.RoleManager, [_engine.SemanticsObject])))(),
    LinkedMapOfRole$SemanticsObjectToRoleManager: () => (T$1.LinkedMapOfRole$SemanticsObjectToRoleManager = dart.constFn(_js_helper.LinkedMap$(_engine.Role, T$1.SemanticsObjectToRoleManager())))(),
    UnicodePropertyLookupOfLineCharProperty: () => (T$1.UnicodePropertyLookupOfLineCharProperty = dart.constFn(_engine.UnicodePropertyLookup$(_engine.LineCharProperty)))(),
    UnicodePropertyLookupOfWordCharProperty: () => (T$1.UnicodePropertyLookupOfWordCharProperty = dart.constFn(_engine.UnicodePropertyLookup$(_engine.WordCharProperty)))(),
    LinkedMapOfString$FormElement: () => (T$1.LinkedMapOfString$FormElement = dart.constFn(_js_helper.LinkedMap$(core.String, html$.FormElement)))(),
    HttpClientResponseCompressionStateL: () => (T$1.HttpClientResponseCompressionStateL = dart.constFn(dart.legacy(_http.HttpClientResponseCompressionState)))(),
    StringToint: () => (T$1.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),
    StringAndListOfStringTovoid: () => (T$1.StringAndListOfStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$.ListOfString()])))(),
    JSArrayOfCookie: () => (T$1.JSArrayOfCookie = dart.constFn(_interceptors.JSArray$(_http.Cookie)))(),
    HashMapOfString$StringN: () => (T$1.HashMapOfString$StringN = dart.constFn(collection.HashMap$(core.String, T$.StringN())))(),
    UnmodifiableMapViewOfString$StringN: () => (T$1.UnmodifiableMapViewOfString$StringN = dart.constFn(collection.UnmodifiableMapView$(core.String, T$.StringN())))(),
    StringNToString: () => (T$1.StringNToString = dart.constFn(dart.fnType(core.String, [T$.StringN()])))(),
    CookieTobool: () => (T$1.CookieTobool = dart.constFn(dart.fnType(core.bool, [_http.Cookie])))(),
    CookieToString: () => (T$1.CookieToString = dart.constFn(dart.fnType(core.String, [_http.Cookie])))(),
    FutureOfHttpClientResponse: () => (T$1.FutureOfHttpClientResponse = dart.constFn(async.Future$(_http.HttpClientResponse)))(),
    _HttpClientRequestToFutureOfHttpClientResponse: () => (T$1._HttpClientRequestToFutureOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOfHttpClientResponse(), [_http._HttpClientRequest])))(),
    _EmptyStreamOfUint8List: () => (T$1._EmptyStreamOfUint8List = dart.constFn(async._EmptyStream$(typed_data.Uint8List)))(),
    Uint8ListToUint8List: () => (T$1.Uint8ListToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [typed_data.Uint8List])))(),
    dynamicToFutureOfHttpClientResponse: () => (T$1.dynamicToFutureOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOfHttpClientResponse(), [dart.dynamic])))(),
    VoidToFutureOfHttpClientResponse: () => (T$1.VoidToFutureOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOfHttpClientResponse(), [])))(),
    VoidToListNOfString: () => (T$1.VoidToListNOfString = dart.constFn(dart.fnType(T$.ListNOfString(), [])))(),
    _CredentialsN: () => (T$1._CredentialsN = dart.constFn(dart.nullable(_http._Credentials)))(),
    _AuthenticationSchemeTo_CredentialsN: () => (T$1._AuthenticationSchemeTo_CredentialsN = dart.constFn(dart.fnType(T$1._CredentialsN(), [_http._AuthenticationScheme])))(),
    _CredentialsTovoid: () => (T$1._CredentialsTovoid = dart.constFn(dart.fnType(dart.void, [_http._Credentials])))(),
    _AuthenticationSchemeAndStringNToFutureOfbool: () => (T$1._AuthenticationSchemeAndStringNToFutureOfbool = dart.constFn(dart.fnType(T$.FutureOfbool(), [_http._AuthenticationScheme, T$.StringN()])))(),
    FutureOrOfHttpClientResponse: () => (T$1.FutureOrOfHttpClientResponse = dart.constFn(async.FutureOr$(_http.HttpClientResponse)))(),
    boolToFutureOrOfHttpClientResponse: () => (T$1.boolToFutureOrOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOrOfHttpClientResponse(), [core.bool])))(),
    SinkOfUint8List: () => (T$1.SinkOfUint8List = dart.constFn(core.Sink$(typed_data.Uint8List)))(),
    EncodingN: () => (T$1.EncodingN = dart.constFn(dart.nullable(convert.Encoding)))(),
    ListOfintToListOfint: () => (T$1.ListOfintToListOfint = dart.constFn(dart.fnType(T$0.ListOfint(), [T$0.ListOfint()])))(),
    CookieTovoid: () => (T$1.CookieTovoid = dart.constFn(dart.fnType(dart.void, [_http.Cookie])))(),
    CompleterOfHttpClientResponse: () => (T$1.CompleterOfHttpClientResponse = dart.constFn(async.Completer$(_http.HttpClientResponse)))(),
    JSArrayOfRedirectInfo: () => (T$1.JSArrayOfRedirectInfo = dart.constFn(_interceptors.JSArray$(_http.RedirectInfo)))(),
    VoidToMap: () => (T$1.VoidToMap = dart.constFn(dart.fnType(core.Map, [])))(),
    JSArrayOfMapOfString$dynamic: () => (T$1.JSArrayOfMapOfString$dynamic = dart.constFn(_interceptors.JSArray$(T$0.MapOfString$dynamic())))(),
    VoidToListOfMapOfString$dynamic: () => (T$1.VoidToListOfMapOfString$dynamic = dart.constFn(dart.fnType(T$0.ListOfMapOfString$dynamic(), [])))(),
    HttpClientResponseToNull: () => (T$1.HttpClientResponseToNull = dart.constFn(dart.fnType(core.Null, [_http.HttpClientResponse])))(),
    JSArrayOfFuture: () => (T$1.JSArrayOfFuture = dart.constFn(_interceptors.JSArray$(async.Future)))(),
    ListToFutureOrOfHttpClientResponse: () => (T$1.ListToFutureOrOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOrOfHttpClientResponse(), [core.List])))(),
    CompleterOfSocket: () => (T$1.CompleterOfSocket = dart.constFn(async.Completer$(io.Socket)))(),
    StringToListOfString: () => (T$1.StringToListOfString = dart.constFn(dart.fnType(T$.ListOfString(), [core.String])))(),
    voidToFuture: () => (T$1.voidToFuture = dart.constFn(dart.fnType(async.Future, [dart.void])))(),
    StreamControllerOfListOfint: () => (T$1.StreamControllerOfListOfint = dart.constFn(async.StreamController$(T$0.ListOfint())))(),
    _HttpOutboundMessageN: () => (T$1._HttpOutboundMessageN = dart.constFn(dart.nullable(_http._HttpOutboundMessage)))(),
    dynamicTo_HttpOutboundMessageN: () => (T$1.dynamicTo_HttpOutboundMessageN = dart.constFn(dart.fnType(T$1._HttpOutboundMessageN(), [dart.dynamic])))(),
    dynamicAnddynamicTo_HttpOutboundMessageN: () => (T$1.dynamicAnddynamicTo_HttpOutboundMessageN = dart.constFn(dart.fnType(T$1._HttpOutboundMessageN(), [dart.dynamic, dart.dynamic])))(),
    dynamicTo_HttpOutboundMessage: () => (T$1.dynamicTo_HttpOutboundMessage = dart.constFn(dart.fnType(_http._HttpOutboundMessage, [dart.dynamic])))(),
    dynamicAnddynamicTo_HttpOutboundMessage: () => (T$1.dynamicAnddynamicTo_HttpOutboundMessage = dart.constFn(dart.fnType(_http._HttpOutboundMessage, [dart.dynamic, dart.dynamic])))(),
    dynamicAndStackTraceToNull: () => (T$1.dynamicAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, core.StackTrace])))(),
    _HttpIncomingTovoid: () => (T$1._HttpIncomingTovoid = dart.constFn(dart.fnType(dart.void, [_http._HttpIncoming])))(),
    CompleterOf_HttpIncoming: () => (T$1.CompleterOf_HttpIncoming = dart.constFn(async.Completer$(_http._HttpIncoming)))(),
    _HttpIncomingToNull: () => (T$1._HttpIncomingToNull = dart.constFn(dart.fnType(core.Null, [_http._HttpIncoming])))(),
    SocketToSocket: () => (T$1.SocketToSocket = dart.constFn(dart.fnType(io.Socket, [io.Socket])))(),
    SocketN: () => (T$1.SocketN = dart.constFn(dart.nullable(io.Socket)))(),
    FutureOfSocketN: () => (T$1.FutureOfSocketN = dart.constFn(async.Future$(T$1.SocketN())))(),
    SocketTo_DetachedSocket: () => (T$1.SocketTo_DetachedSocket = dart.constFn(dart.fnType(_http._DetachedSocket, [io.Socket])))(),
    SocketTovoid: () => (T$1.SocketTovoid = dart.constFn(dart.fnType(dart.void, [io.Socket])))(),
    FutureOfSecureSocket: () => (T$1.FutureOfSecureSocket = dart.constFn(async.Future$(io.SecureSocket)))(),
    HttpClientResponseToFutureOfSecureSocket: () => (T$1.HttpClientResponseToFutureOfSecureSocket = dart.constFn(dart.fnType(T$1.FutureOfSecureSocket(), [_http.HttpClientResponse])))(),
    SecureSocketTo_HttpClientConnection: () => (T$1.SecureSocketTo_HttpClientConnection = dart.constFn(dart.fnType(_http._HttpClientConnection, [io.SecureSocket])))(),
    _HashSetOf_HttpClientConnection: () => (T$1._HashSetOf_HttpClientConnection = dart.constFn(collection._HashSet$(_http._HttpClientConnection)))(),
    _HashSetOfConnectionTask: () => (T$1._HashSetOfConnectionTask = dart.constFn(collection._HashSet$(io.ConnectionTask)))(),
    FutureOf_ConnectionInfo: () => (T$1.FutureOf_ConnectionInfo = dart.constFn(async.Future$(_http._ConnectionInfo)))(),
    CompleterOf_ConnectionInfo: () => (T$1.CompleterOf_ConnectionInfo = dart.constFn(async.Completer$(_http._ConnectionInfo)))(),
    X509CertificateTobool: () => (T$1.X509CertificateTobool = dart.constFn(dart.fnType(core.bool, [io.X509Certificate])))(),
    _HttpClientConnectionTo_ConnectionInfo: () => (T$1._HttpClientConnectionTo_ConnectionInfo = dart.constFn(dart.fnType(_http._ConnectionInfo, [_http._HttpClientConnection])))(),
    FutureOrOf_ConnectionInfo: () => (T$1.FutureOrOf_ConnectionInfo = dart.constFn(async.FutureOr$(_http._ConnectionInfo)))(),
    dynamicToFutureOrOf_ConnectionInfo: () => (T$1.dynamicToFutureOrOf_ConnectionInfo = dart.constFn(dart.fnType(T$1.FutureOrOf_ConnectionInfo(), [dart.dynamic])))(),
    ConnectionTaskToFutureOf_ConnectionInfo: () => (T$1.ConnectionTaskToFutureOf_ConnectionInfo = dart.constFn(dart.fnType(T$1.FutureOf_ConnectionInfo(), [io.ConnectionTask])))(),
    IdentityMapOfString$_ConnectionTarget: () => (T$1.IdentityMapOfString$_ConnectionTarget = dart.constFn(_js_helper.IdentityMap$(core.String, _http._ConnectionTarget)))(),
    JSArrayOf_Credentials: () => (T$1.JSArrayOf_Credentials = dart.constFn(_interceptors.JSArray$(_http._Credentials)))(),
    JSArrayOf_ProxyCredentials: () => (T$1.JSArrayOf_ProxyCredentials = dart.constFn(_interceptors.JSArray$(_http._ProxyCredentials)))(),
    MapNOfString$String: () => (T$1.MapNOfString$String = dart.constFn(dart.nullable(T$0.MapOfString$String())))(),
    Uri__ToString: () => (T$1.Uri__ToString = dart.constFn(dart.fnType(core.String, [core.Uri], {environment: T$1.MapNOfString$String()}, {})))(),
    _ConnectionTargetTobool: () => (T$1._ConnectionTargetTobool = dart.constFn(dart.fnType(core.bool, [_http._ConnectionTarget])))(),
    _ProxyL: () => (T$1._ProxyL = dart.constFn(dart.legacy(_http._Proxy)))(),
    FutureOf_HttpClientRequest: () => (T$1.FutureOf_HttpClientRequest = dart.constFn(async.Future$(_http._HttpClientRequest)))(),
    _ConnectionInfoTo_HttpClientRequest: () => (T$1._ConnectionInfoTo_HttpClientRequest = dart.constFn(dart.fnType(_http._HttpClientRequest, [_http._ConnectionInfo])))(),
    FutureOrOf_HttpClientRequest: () => (T$1.FutureOrOf_HttpClientRequest = dart.constFn(async.FutureOr$(_http._HttpClientRequest)))(),
    _ConnectionInfoToFutureOrOf_HttpClientRequest: () => (T$1._ConnectionInfoToFutureOrOf_HttpClientRequest = dart.constFn(dart.fnType(T$1.FutureOrOf_HttpClientRequest(), [_http._ConnectionInfo])))(),
    _HttpClientRequestTo_HttpClientRequest: () => (T$1._HttpClientRequestTo_HttpClientRequest = dart.constFn(dart.fnType(_http._HttpClientRequest, [_http._HttpClientRequest])))(),
    VoidTo_ConnectionTarget: () => (T$1.VoidTo_ConnectionTarget = dart.constFn(dart.fnType(_http._ConnectionTarget, [])))(),
    dynamicToFutureOf_ConnectionInfo: () => (T$1.dynamicToFutureOf_ConnectionInfo = dart.constFn(dart.fnType(T$1.FutureOf_ConnectionInfo(), [dart.dynamic])))(),
    _SiteCredentialsN: () => (T$1._SiteCredentialsN = dart.constFn(dart.nullable(_http._SiteCredentials)))(),
    _SiteCredentialsNAnd_CredentialsTo_SiteCredentialsN: () => (T$1._SiteCredentialsNAnd_CredentialsTo_SiteCredentialsN = dart.constFn(dart.fnType(T$1._SiteCredentialsN(), [T$1._SiteCredentialsN(), _http._Credentials])))(),
    StringNToStringN: () => (T$1.StringNToStringN = dart.constFn(dart.fnType(T$.StringN(), [T$.StringN()])))(),
    StreamOfUint8List: () => (T$1.StreamOfUint8List = dart.constFn(async.Stream$(typed_data.Uint8List)))(),
    SocketToNull: () => (T$1.SocketToNull = dart.constFn(dart.fnType(core.Null, [io.Socket])))(),
    dynamicTo_DetachedSocket: () => (T$1.dynamicTo_DetachedSocket = dart.constFn(dart.fnType(_http._DetachedSocket, [dart.dynamic])))(),
    IdentityMapOfint$_HttpConnection: () => (T$1.IdentityMapOfint$_HttpConnection = dart.constFn(_js_helper.IdentityMap$(core.int, _http._HttpConnection)))(),
    LinkedListOf_HttpConnection: () => (T$1.LinkedListOf_HttpConnection = dart.constFn(collection.LinkedList$(_http._HttpConnection)))(),
    StreamControllerOfHttpRequest: () => (T$1.StreamControllerOfHttpRequest = dart.constFn(async.StreamController$(_http.HttpRequest)))(),
    ServerSocketTo_HttpServer: () => (T$1.ServerSocketTo_HttpServer = dart.constFn(dart.fnType(_http._HttpServer, [io.ServerSocket])))(),
    SecureServerSocketTo_HttpServer: () => (T$1.SecureServerSocketTo_HttpServer = dart.constFn(dart.fnType(_http._HttpServer, [io.SecureServerSocket])))(),
    _HttpConnectionTovoid: () => (T$1._HttpConnectionTovoid = dart.constFn(dart.fnType(dart.void, [_http._HttpConnection])))(),
    _HttpConnectionToMap: () => (T$1._HttpConnectionToMap = dart.constFn(dart.fnType(core.Map, [_http._HttpConnection])))(),
    LinkedMapOfint$_HttpServer: () => (T$1.LinkedMapOfint$_HttpServer = dart.constFn(_js_helper.LinkedMap$(core.int, _http._HttpServer)))(),
    JSArrayOf_Proxy: () => (T$1.JSArrayOf_Proxy = dart.constFn(_interceptors.JSArray$(_http._Proxy)))(),
    StreamControllerOf_HttpIncoming: () => (T$1.StreamControllerOf_HttpIncoming = dart.constFn(async.StreamController$(_http._HttpIncoming)))(),
    IterableOfMapEntry: () => (T$1.IterableOfMapEntry = dart.constFn(core.Iterable$(core.MapEntry)))(),
    VoidToNdynamic: () => (T$1.VoidToNdynamic = dart.constFn(dart.nullable(T$.VoidTodynamic())))(),
    IdentityMapOfString$_HttpSession: () => (T$1.IdentityMapOfString$_HttpSession = dart.constFn(_js_helper.IdentityMap$(core.String, _http._HttpSession)))(),
    HttpOverridesN: () => (T$1.HttpOverridesN = dart.constFn(dart.nullable(_http.HttpOverrides)))(),
    EventSinkTo_WebSocketProtocolTransformer: () => (T$1.EventSinkTo_WebSocketProtocolTransformer = dart.constFn(dart.fnType(_http._WebSocketProtocolTransformer, [async.EventSink])))(),
    StreamControllerOfWebSocket: () => (T$1.StreamControllerOfWebSocket = dart.constFn(async.StreamController$(_http.WebSocket)))(),
    StreamOfHttpRequest: () => (T$1.StreamOfHttpRequest = dart.constFn(async.Stream$(_http.HttpRequest)))(),
    WebSocketTovoid: () => (T$1.WebSocketTovoid = dart.constFn(dart.fnType(dart.void, [_http.WebSocket])))(),
    HttpRequestTovoid: () => (T$1.HttpRequestTovoid = dart.constFn(dart.fnType(dart.void, [_http.HttpRequest])))(),
    FutureOfWebSocket: () => (T$1.FutureOfWebSocket = dart.constFn(async.Future$(_http.WebSocket)))(),
    SocketTo_WebSocketImpl: () => (T$1.SocketTo_WebSocketImpl = dart.constFn(dart.fnType(_http._WebSocketImpl, [io.Socket])))(),
    StringNToFutureOfWebSocket: () => (T$1.StringNToFutureOfWebSocket = dart.constFn(dart.fnType(T$1.FutureOfWebSocket(), [T$.StringN()])))(),
    VoidToFutureOrOfString: () => (T$1.VoidToFutureOrOfString = dart.constFn(dart.fnType(T$0.FutureOrOfString(), [])))(),
    EventSinkOfListOfint: () => (T$1.EventSinkOfListOfint = dart.constFn(async.EventSink$(T$0.ListOfint())))(),
    EventSinkOfListOfintTo_WebSocketOutgoingTransformer: () => (T$1.EventSinkOfListOfintTo_WebSocketOutgoingTransformer = dart.constFn(dart.fnType(_http._WebSocketOutgoingTransformer, [T$1.EventSinkOfListOfint()])))(),
    CompleterOfWebSocket: () => (T$1.CompleterOfWebSocket = dart.constFn(async.Completer$(_http.WebSocket)))(),
    dynamicTo_WebSocketImpl: () => (T$1.dynamicTo_WebSocketImpl = dart.constFn(dart.fnType(_http._WebSocketImpl, [dart.dynamic])))(),
    HttpClientRequestToFutureOfHttpClientResponse: () => (T$1.HttpClientRequestToFutureOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOfHttpClientResponse(), [_http.HttpClientRequest])))(),
    StringToNever: () => (T$1.StringToNever = dart.constFn(dart.fnType(dart.Never, [core.String])))(),
    HttpClientResponseToFutureOfWebSocket: () => (T$1.HttpClientResponseToFutureOfWebSocket = dart.constFn(dart.fnType(T$1.FutureOfWebSocket(), [_http.HttpClientResponse])))(),
    dynamicToMap: () => (T$1.dynamicToMap = dart.constFn(dart.fnType(core.Map, [dart.dynamic])))(),
    LinkedMapOfint$_WebSocketImpl: () => (T$1.LinkedMapOfint$_WebSocketImpl = dart.constFn(_js_helper.LinkedMap$(core.int, _http._WebSocketImpl)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$, T$0, T$1);
  var S = {
    _delete$1: dart.privateName(indexed_db, "_delete"),
    $delete: dartx.delete = Symbol("dartx.delete"),
    _update: dart.privateName(indexed_db, "_update"),
    $next: dartx.next = Symbol("dartx.next"),
    $direction: dartx.direction = Symbol("dartx.direction"),
    $key: dartx.key = Symbol("dartx.key"),
    $primaryKey: dartx.primaryKey = Symbol("dartx.primaryKey"),
    $source: dartx.source = Symbol("dartx.source"),
    $advance: dartx.advance = Symbol("dartx.advance"),
    $continuePrimaryKey: dartx.continuePrimaryKey = Symbol("dartx.continuePrimaryKey"),
    _update_1: dart.privateName(indexed_db, "_update_1"),
    _get_value: dart.privateName(indexed_db, "_get_value"),
    $value: dartx.value = Symbol("dartx.value"),
    _createObjectStore: dart.privateName(indexed_db, "_createObjectStore"),
    $createObjectStore: dartx.createObjectStore = Symbol("dartx.createObjectStore"),
    _transaction: dart.privateName(indexed_db, "_transaction"),
    $transaction: dartx.transaction = Symbol("dartx.transaction"),
    $transactionStore: dartx.transactionStore = Symbol("dartx.transactionStore"),
    $transactionList: dartx.transactionList = Symbol("dartx.transactionList"),
    $transactionStores: dartx.transactionStores = Symbol("dartx.transactionStores"),
    $objectStoreNames: dartx.objectStoreNames = Symbol("dartx.objectStoreNames"),
    $version: dartx.version = Symbol("dartx.version"),
    $close: dartx.close = Symbol("dartx.close"),
    _createObjectStore_1: dart.privateName(indexed_db, "_createObjectStore_1"),
    _createObjectStore_2: dart.privateName(indexed_db, "_createObjectStore_2"),
    $deleteObjectStore: dartx.deleteObjectStore = Symbol("dartx.deleteObjectStore"),
    $onAbort: dartx.onAbort = Symbol("dartx.onAbort"),
    $onClose: dartx.onClose = Symbol("dartx.onClose"),
    $onError: dartx.onError = Symbol("dartx.onError"),
    $onVersionChange: dartx.onVersionChange = Symbol("dartx.onVersionChange"),
    $on: dartx.on = Symbol("dartx.on"),
    _addEventListener: dart.privateName(html$, "_addEventListener"),
    $addEventListener: dartx.addEventListener = Symbol("dartx.addEventListener"),
    _removeEventListener: dart.privateName(html$, "_removeEventListener"),
    $removeEventListener: dartx.removeEventListener = Symbol("dartx.removeEventListener"),
    $dispatchEvent: dartx.dispatchEvent = Symbol("dartx.dispatchEvent"),
    EventStreamProvider__eventType: dart.privateName(html$, "EventStreamProvider._eventType"),
    _open: dart.privateName(indexed_db, "_open"),
    $onUpgradeNeeded: dartx.onUpgradeNeeded = Symbol("dartx.onUpgradeNeeded"),
    $onBlocked: dartx.onBlocked = Symbol("dartx.onBlocked"),
    $open: dartx.open = Symbol("dartx.open"),
    _deleteDatabase: dart.privateName(indexed_db, "_deleteDatabase"),
    $onSuccess: dartx.onSuccess = Symbol("dartx.onSuccess"),
    $deleteDatabase: dartx.deleteDatabase = Symbol("dartx.deleteDatabase"),
    $supportsDatabaseNames: dartx.supportsDatabaseNames = Symbol("dartx.supportsDatabaseNames"),
    $cmp: dartx.cmp = Symbol("dartx.cmp"),
    _count$2: dart.privateName(indexed_db, "_count"),
    $count: dartx.count = Symbol("dartx.count"),
    _get: dart.privateName(indexed_db, "_get"),
    $get: dartx.get = Symbol("dartx.get"),
    _getKey: dart.privateName(indexed_db, "_getKey"),
    $getKey: dartx.getKey = Symbol("dartx.getKey"),
    _openCursor: dart.privateName(indexed_db, "_openCursor"),
    $openCursor: dartx.openCursor = Symbol("dartx.openCursor"),
    _openKeyCursor: dart.privateName(indexed_db, "_openKeyCursor"),
    $openKeyCursor: dartx.openKeyCursor = Symbol("dartx.openKeyCursor"),
    $keyPath: dartx.keyPath = Symbol("dartx.keyPath"),
    $multiEntry: dartx.multiEntry = Symbol("dartx.multiEntry"),
    $objectStore: dartx.objectStore = Symbol("dartx.objectStore"),
    $unique: dartx.unique = Symbol("dartx.unique"),
    $getAll: dartx.getAll = Symbol("dartx.getAll"),
    $getAllKeys: dartx.getAllKeys = Symbol("dartx.getAllKeys"),
    $lower: dartx.lower = Symbol("dartx.lower"),
    $lowerOpen: dartx.lowerOpen = Symbol("dartx.lowerOpen"),
    $upper: dartx.upper = Symbol("dartx.upper"),
    $upperOpen: dartx.upperOpen = Symbol("dartx.upperOpen"),
    $includes: dartx.includes = Symbol("dartx.includes"),
    _add$3: dart.privateName(indexed_db, "_add"),
    _clear$2: dart.privateName(indexed_db, "_clear"),
    _put: dart.privateName(indexed_db, "_put"),
    $put: dartx.put = Symbol("dartx.put"),
    $getObject: dartx.getObject = Symbol("dartx.getObject"),
    _createIndex: dart.privateName(indexed_db, "_createIndex"),
    $createIndex: dartx.createIndex = Symbol("dartx.createIndex"),
    $autoIncrement: dartx.autoIncrement = Symbol("dartx.autoIncrement"),
    $indexNames: dartx.indexNames = Symbol("dartx.indexNames"),
    _add_1: dart.privateName(indexed_db, "_add_1"),
    _add_2: dart.privateName(indexed_db, "_add_2"),
    _createIndex_1: dart.privateName(indexed_db, "_createIndex_1"),
    _createIndex_2: dart.privateName(indexed_db, "_createIndex_2"),
    $deleteIndex: dartx.deleteIndex = Symbol("dartx.deleteIndex"),
    $index: dartx.index = Symbol("dartx.index"),
    _put_1: dart.privateName(indexed_db, "_put_1"),
    _put_2: dart.privateName(indexed_db, "_put_2"),
    $result: dartx.result = Symbol("dartx.result"),
    $type: dartx.type = Symbol("dartx.type"),
    _observe_1: dart.privateName(indexed_db, "_observe_1"),
    $observe: dartx.observe = Symbol("dartx.observe"),
    $unobserve: dartx.unobserve = Symbol("dartx.unobserve"),
    $database: dartx.database = Symbol("dartx.database"),
    $records: dartx.records = Symbol("dartx.records"),
    $error: dartx.error = Symbol("dartx.error"),
    $readyState: dartx.readyState = Symbol("dartx.readyState"),
    _get_result: dart.privateName(indexed_db, "_get_result"),
    $onComplete: dartx.onComplete = Symbol("dartx.onComplete"),
    $completed: dartx.completed = Symbol("dartx.completed"),
    $db: dartx.db = Symbol("dartx.db"),
    $mode: dartx.mode = Symbol("dartx.mode"),
    $abort: dartx.abort = Symbol("dartx.abort"),
    $dataLoss: dartx.dataLoss = Symbol("dartx.dataLoss"),
    $dataLossMessage: dartx.dataLossMessage = Symbol("dartx.dataLossMessage"),
    $newVersion: dartx.newVersion = Symbol("dartx.newVersion"),
    $oldVersion: dartx.oldVersion = Symbol("dartx.oldVersion"),
    $target: dartx.target = Symbol("dartx.target"),
    _createEvent: dart.privateName(html$, "_createEvent"),
    _initEvent: dart.privateName(html$, "_initEvent"),
    _selector: dart.privateName(html$, "_selector"),
    $currentTarget: dartx.currentTarget = Symbol("dartx.currentTarget"),
    $matches: dartx.matches = Symbol("dartx.matches"),
    $parent: dartx.parent = Symbol("dartx.parent"),
    $matchingTarget: dartx.matchingTarget = Symbol("dartx.matchingTarget"),
    $path: dartx.path = Symbol("dartx.path"),
    $bubbles: dartx.bubbles = Symbol("dartx.bubbles"),
    $cancelable: dartx.cancelable = Symbol("dartx.cancelable"),
    $composed: dartx.composed = Symbol("dartx.composed"),
    _get_currentTarget: dart.privateName(html$, "_get_currentTarget"),
    $defaultPrevented: dartx.defaultPrevented = Symbol("dartx.defaultPrevented"),
    $eventPhase: dartx.eventPhase = Symbol("dartx.eventPhase"),
    $isTrusted: dartx.isTrusted = Symbol("dartx.isTrusted"),
    _get_target: dart.privateName(html$, "_get_target"),
    $timeStamp: dartx.timeStamp = Symbol("dartx.timeStamp"),
    $composedPath: dartx.composedPath = Symbol("dartx.composedPath"),
    $preventDefault: dartx.preventDefault = Symbol("dartx.preventDefault"),
    $stopImmediatePropagation: dartx.stopImmediatePropagation = Symbol("dartx.stopImmediatePropagation"),
    $stopPropagation: dartx.stopPropagation = Symbol("dartx.stopPropagation"),
    $nonce: dartx.nonce = Symbol("dartx.nonce"),
    $createFragment: dartx.createFragment = Symbol("dartx.createFragment"),
    $nodes: dartx.nodes = Symbol("dartx.nodes"),
    $attributes: dartx.attributes = Symbol("dartx.attributes"),
    _getAttribute: dart.privateName(html$, "_getAttribute"),
    $getAttribute: dartx.getAttribute = Symbol("dartx.getAttribute"),
    _getAttributeNS: dart.privateName(html$, "_getAttributeNS"),
    $getAttributeNS: dartx.getAttributeNS = Symbol("dartx.getAttributeNS"),
    _hasAttribute: dart.privateName(html$, "_hasAttribute"),
    $hasAttribute: dartx.hasAttribute = Symbol("dartx.hasAttribute"),
    _hasAttributeNS: dart.privateName(html$, "_hasAttributeNS"),
    $hasAttributeNS: dartx.hasAttributeNS = Symbol("dartx.hasAttributeNS"),
    _removeAttribute: dart.privateName(html$, "_removeAttribute"),
    $removeAttribute: dartx.removeAttribute = Symbol("dartx.removeAttribute"),
    _removeAttributeNS: dart.privateName(html$, "_removeAttributeNS"),
    $removeAttributeNS: dartx.removeAttributeNS = Symbol("dartx.removeAttributeNS"),
    _setAttribute: dart.privateName(html$, "_setAttribute"),
    $setAttribute: dartx.setAttribute = Symbol("dartx.setAttribute"),
    _setAttributeNS: dart.privateName(html$, "_setAttributeNS"),
    $setAttributeNS: dartx.setAttributeNS = Symbol("dartx.setAttributeNS"),
    $children: dartx.children = Symbol("dartx.children"),
    _children: dart.privateName(html$, "_children"),
    _querySelectorAll: dart.privateName(html$, "_querySelectorAll"),
    $querySelectorAll: dartx.querySelectorAll = Symbol("dartx.querySelectorAll"),
    _setApplyScroll: dart.privateName(html$, "_setApplyScroll"),
    $setApplyScroll: dartx.setApplyScroll = Symbol("dartx.setApplyScroll"),
    _setDistributeScroll: dart.privateName(html$, "_setDistributeScroll"),
    $setDistributeScroll: dartx.setDistributeScroll = Symbol("dartx.setDistributeScroll"),
    $classes: dartx.classes = Symbol("dartx.classes"),
    $dataset: dartx.dataset = Symbol("dartx.dataset"),
    $getNamespacedAttributes: dartx.getNamespacedAttributes = Symbol("dartx.getNamespacedAttributes"),
    _getComputedStyle: dart.privateName(html$, "_getComputedStyle"),
    $getComputedStyle: dartx.getComputedStyle = Symbol("dartx.getComputedStyle"),
    $client: dartx.client = Symbol("dartx.client"),
    $offsetLeft: dartx.offsetLeft = Symbol("dartx.offsetLeft"),
    $offsetTop: dartx.offsetTop = Symbol("dartx.offsetTop"),
    $offsetWidth: dartx.offsetWidth = Symbol("dartx.offsetWidth"),
    $offsetHeight: dartx.offsetHeight = Symbol("dartx.offsetHeight"),
    $offset: dartx.offset = Symbol("dartx.offset"),
    $append: dartx.append = Symbol("dartx.append"),
    $appendText: dartx.appendText = Symbol("dartx.appendText"),
    $insertAdjacentHtml: dartx.insertAdjacentHtml = Symbol("dartx.insertAdjacentHtml"),
    $appendHtml: dartx.appendHtml = Symbol("dartx.appendHtml"),
    $enteredView: dartx.enteredView = Symbol("dartx.enteredView"),
    $attached: dartx.attached = Symbol("dartx.attached"),
    $leftView: dartx.leftView = Symbol("dartx.leftView"),
    $detached: dartx.detached = Symbol("dartx.detached"),
    _getClientRects: dart.privateName(html$, "_getClientRects"),
    $getClientRects: dartx.getClientRects = Symbol("dartx.getClientRects"),
    _animate: dart.privateName(html$, "_animate"),
    $animate: dartx.animate = Symbol("dartx.animate"),
    $attributeChanged: dartx.attributeChanged = Symbol("dartx.attributeChanged"),
    _localName: dart.privateName(html$, "_localName"),
    $localName: dartx.localName = Symbol("dartx.localName"),
    _namespaceUri: dart.privateName(html$, "_namespaceUri"),
    $namespaceUri: dartx.namespaceUri = Symbol("dartx.namespaceUri"),
    _scrollIntoView: dart.privateName(html$, "_scrollIntoView"),
    _scrollIntoViewIfNeeded: dart.privateName(html$, "_scrollIntoViewIfNeeded"),
    $scrollIntoView: dartx.scrollIntoView = Symbol("dartx.scrollIntoView"),
    _insertAdjacentText: dart.privateName(html$, "_insertAdjacentText"),
    _insertAdjacentNode: dart.privateName(html$, "_insertAdjacentNode"),
    $insertAdjacentText: dartx.insertAdjacentText = Symbol("dartx.insertAdjacentText"),
    _insertAdjacentHtml: dart.privateName(html$, "_insertAdjacentHtml"),
    _insertAdjacentElement: dart.privateName(html$, "_insertAdjacentElement"),
    $insertAdjacentElement: dartx.insertAdjacentElement = Symbol("dartx.insertAdjacentElement"),
    $nextNode: dartx.nextNode = Symbol("dartx.nextNode"),
    $matchesWithAncestors: dartx.matchesWithAncestors = Symbol("dartx.matchesWithAncestors"),
    $createShadowRoot: dartx.createShadowRoot = Symbol("dartx.createShadowRoot"),
    $shadowRoot: dartx.shadowRoot = Symbol("dartx.shadowRoot"),
    $contentEdge: dartx.contentEdge = Symbol("dartx.contentEdge"),
    $paddingEdge: dartx.paddingEdge = Symbol("dartx.paddingEdge"),
    $borderEdge: dartx.borderEdge = Symbol("dartx.borderEdge"),
    $marginEdge: dartx.marginEdge = Symbol("dartx.marginEdge"),
    $offsetTo: dartx.offsetTo = Symbol("dartx.offsetTo"),
    $documentOffset: dartx.documentOffset = Symbol("dartx.documentOffset"),
    $createHtmlDocument: dartx.createHtmlDocument = Symbol("dartx.createHtmlDocument"),
    $createElement: dartx.createElement = Symbol("dartx.createElement"),
    $baseUri: dartx.baseUri = Symbol("dartx.baseUri"),
    $head: dartx.head = Symbol("dartx.head"),
    _canBeUsedToCreateContextualFragment: dart.privateName(html$, "_canBeUsedToCreateContextualFragment"),
    _innerHtml: dart.privateName(html$, "_innerHtml"),
    _cannotBeUsedToCreateContextualFragment: dart.privateName(html$, "_cannotBeUsedToCreateContextualFragment"),
    $setInnerHtml: dartx.setInnerHtml = Symbol("dartx.setInnerHtml"),
    $innerHtml: dartx.innerHtml = Symbol("dartx.innerHtml"),
    $text: dartx.text = Symbol("dartx.text"),
    $innerText: dartx.innerText = Symbol("dartx.innerText"),
    $offsetParent: dartx.offsetParent = Symbol("dartx.offsetParent"),
    $scrollHeight: dartx.scrollHeight = Symbol("dartx.scrollHeight"),
    $scrollLeft: dartx.scrollLeft = Symbol("dartx.scrollLeft"),
    $scrollTop: dartx.scrollTop = Symbol("dartx.scrollTop"),
    $scrollWidth: dartx.scrollWidth = Symbol("dartx.scrollWidth"),
    $contentEditable: dartx.contentEditable = Symbol("dartx.contentEditable"),
    $dir: dartx.dir = Symbol("dartx.dir"),
    $draggable: dartx.draggable = Symbol("dartx.draggable"),
    $hidden: dartx.hidden = Symbol("dartx.hidden"),
    $inert: dartx.inert = Symbol("dartx.inert"),
    $inputMode: dartx.inputMode = Symbol("dartx.inputMode"),
    $isContentEditable: dartx.isContentEditable = Symbol("dartx.isContentEditable"),
    $lang: dartx.lang = Symbol("dartx.lang"),
    $spellcheck: dartx.spellcheck = Symbol("dartx.spellcheck"),
    $style: dartx.style = Symbol("dartx.style"),
    $tabIndex: dartx.tabIndex = Symbol("dartx.tabIndex"),
    $title: dartx.title = Symbol("dartx.title"),
    $translate: dartx.translate = Symbol("dartx.translate"),
    $blur: dartx.blur = Symbol("dartx.blur"),
    $click: dartx.click = Symbol("dartx.click"),
    $focus: dartx.focus = Symbol("dartx.focus"),
    $accessibleNode: dartx.accessibleNode = Symbol("dartx.accessibleNode"),
    $assignedSlot: dartx.assignedSlot = Symbol("dartx.assignedSlot"),
    _attributes$1: dart.privateName(html$, "_attributes"),
    $className: dartx.className = Symbol("dartx.className"),
    $clientHeight: dartx.clientHeight = Symbol("dartx.clientHeight"),
    $clientLeft: dartx.clientLeft = Symbol("dartx.clientLeft"),
    $clientTop: dartx.clientTop = Symbol("dartx.clientTop"),
    $clientWidth: dartx.clientWidth = Symbol("dartx.clientWidth"),
    $computedName: dartx.computedName = Symbol("dartx.computedName"),
    $computedRole: dartx.computedRole = Symbol("dartx.computedRole"),
    $id: dartx.id = Symbol("dartx.id"),
    $outerHtml: dartx.outerHtml = Symbol("dartx.outerHtml"),
    _scrollHeight: dart.privateName(html$, "_scrollHeight"),
    _scrollLeft: dart.privateName(html$, "_scrollLeft"),
    _scrollTop: dart.privateName(html$, "_scrollTop"),
    _scrollWidth: dart.privateName(html$, "_scrollWidth"),
    $slot: dartx.slot = Symbol("dartx.slot"),
    $styleMap: dartx.styleMap = Symbol("dartx.styleMap"),
    $tagName: dartx.tagName = Symbol("dartx.tagName"),
    _attachShadow_1: dart.privateName(html$, "_attachShadow_1"),
    $attachShadow: dartx.attachShadow = Symbol("dartx.attachShadow"),
    $closest: dartx.closest = Symbol("dartx.closest"),
    $getAnimations: dartx.getAnimations = Symbol("dartx.getAnimations"),
    $getAttributeNames: dartx.getAttributeNames = Symbol("dartx.getAttributeNames"),
    $getBoundingClientRect: dartx.getBoundingClientRect = Symbol("dartx.getBoundingClientRect"),
    $getDestinationInsertionPoints: dartx.getDestinationInsertionPoints = Symbol("dartx.getDestinationInsertionPoints"),
    $getElementsByClassName: dartx.getElementsByClassName = Symbol("dartx.getElementsByClassName"),
    _getElementsByTagName: dart.privateName(html$, "_getElementsByTagName"),
    $hasPointerCapture: dartx.hasPointerCapture = Symbol("dartx.hasPointerCapture"),
    $releasePointerCapture: dartx.releasePointerCapture = Symbol("dartx.releasePointerCapture"),
    $requestPointerLock: dartx.requestPointerLock = Symbol("dartx.requestPointerLock"),
    _scroll_1: dart.privateName(html$, "_scroll_1"),
    _scroll_2: dart.privateName(html$, "_scroll_2"),
    _scroll_3: dart.privateName(html$, "_scroll_3"),
    $scroll: dartx.scroll = Symbol("dartx.scroll"),
    _scrollBy_1: dart.privateName(html$, "_scrollBy_1"),
    _scrollBy_2: dart.privateName(html$, "_scrollBy_2"),
    _scrollBy_3: dart.privateName(html$, "_scrollBy_3"),
    $scrollBy: dartx.scrollBy = Symbol("dartx.scrollBy"),
    _scrollTo_1: dart.privateName(html$, "_scrollTo_1"),
    _scrollTo_2: dart.privateName(html$, "_scrollTo_2"),
    _scrollTo_3: dart.privateName(html$, "_scrollTo_3"),
    $scrollTo: dartx.scrollTo = Symbol("dartx.scrollTo"),
    $setPointerCapture: dartx.setPointerCapture = Symbol("dartx.setPointerCapture"),
    $requestFullscreen: dartx.requestFullscreen = Symbol("dartx.requestFullscreen"),
    $after: dartx.after = Symbol("dartx.after"),
    $before: dartx.before = Symbol("dartx.before"),
    $nextElementSibling: dartx.nextElementSibling = Symbol("dartx.nextElementSibling"),
    $previousElementSibling: dartx.previousElementSibling = Symbol("dartx.previousElementSibling"),
    _childElementCount: dart.privateName(html$, "_childElementCount"),
    _firstElementChild: dart.privateName(html$, "_firstElementChild"),
    _lastElementChild: dart.privateName(html$, "_lastElementChild"),
    $querySelector: dartx.querySelector = Symbol("dartx.querySelector"),
    $onBeforeCopy: dartx.onBeforeCopy = Symbol("dartx.onBeforeCopy"),
    $onBeforeCut: dartx.onBeforeCut = Symbol("dartx.onBeforeCut"),
    $onBeforePaste: dartx.onBeforePaste = Symbol("dartx.onBeforePaste"),
    $onBlur: dartx.onBlur = Symbol("dartx.onBlur"),
    $onCanPlay: dartx.onCanPlay = Symbol("dartx.onCanPlay"),
    $onCanPlayThrough: dartx.onCanPlayThrough = Symbol("dartx.onCanPlayThrough"),
    $onChange: dartx.onChange = Symbol("dartx.onChange"),
    $onClick: dartx.onClick = Symbol("dartx.onClick"),
    $onContextMenu: dartx.onContextMenu = Symbol("dartx.onContextMenu"),
    $onCopy: dartx.onCopy = Symbol("dartx.onCopy"),
    $onCut: dartx.onCut = Symbol("dartx.onCut"),
    $onDoubleClick: dartx.onDoubleClick = Symbol("dartx.onDoubleClick"),
    $onDrag: dartx.onDrag = Symbol("dartx.onDrag"),
    $onDragEnd: dartx.onDragEnd = Symbol("dartx.onDragEnd"),
    $onDragEnter: dartx.onDragEnter = Symbol("dartx.onDragEnter"),
    $onDragLeave: dartx.onDragLeave = Symbol("dartx.onDragLeave"),
    $onDragOver: dartx.onDragOver = Symbol("dartx.onDragOver"),
    $onDragStart: dartx.onDragStart = Symbol("dartx.onDragStart"),
    $onDrop: dartx.onDrop = Symbol("dartx.onDrop"),
    $onDurationChange: dartx.onDurationChange = Symbol("dartx.onDurationChange"),
    $onEmptied: dartx.onEmptied = Symbol("dartx.onEmptied"),
    $onEnded: dartx.onEnded = Symbol("dartx.onEnded"),
    $onFocus: dartx.onFocus = Symbol("dartx.onFocus"),
    $onInput: dartx.onInput = Symbol("dartx.onInput"),
    $onInvalid: dartx.onInvalid = Symbol("dartx.onInvalid"),
    $onKeyDown: dartx.onKeyDown = Symbol("dartx.onKeyDown"),
    $onKeyPress: dartx.onKeyPress = Symbol("dartx.onKeyPress"),
    $onKeyUp: dartx.onKeyUp = Symbol("dartx.onKeyUp"),
    $onLoad: dartx.onLoad = Symbol("dartx.onLoad"),
    $onLoadedData: dartx.onLoadedData = Symbol("dartx.onLoadedData"),
    $onLoadedMetadata: dartx.onLoadedMetadata = Symbol("dartx.onLoadedMetadata"),
    $onMouseDown: dartx.onMouseDown = Symbol("dartx.onMouseDown"),
    $onMouseEnter: dartx.onMouseEnter = Symbol("dartx.onMouseEnter"),
    $onMouseLeave: dartx.onMouseLeave = Symbol("dartx.onMouseLeave"),
    $onMouseMove: dartx.onMouseMove = Symbol("dartx.onMouseMove"),
    $onMouseOut: dartx.onMouseOut = Symbol("dartx.onMouseOut"),
    $onMouseOver: dartx.onMouseOver = Symbol("dartx.onMouseOver"),
    $onMouseUp: dartx.onMouseUp = Symbol("dartx.onMouseUp"),
    $onMouseWheel: dartx.onMouseWheel = Symbol("dartx.onMouseWheel"),
    $onPaste: dartx.onPaste = Symbol("dartx.onPaste"),
    $onPause: dartx.onPause = Symbol("dartx.onPause"),
    $onPlay: dartx.onPlay = Symbol("dartx.onPlay"),
    $onPlaying: dartx.onPlaying = Symbol("dartx.onPlaying"),
    $onRateChange: dartx.onRateChange = Symbol("dartx.onRateChange"),
    $onReset: dartx.onReset = Symbol("dartx.onReset"),
    $onResize: dartx.onResize = Symbol("dartx.onResize"),
    $onScroll: dartx.onScroll = Symbol("dartx.onScroll"),
    $onSearch: dartx.onSearch = Symbol("dartx.onSearch"),
    $onSeeked: dartx.onSeeked = Symbol("dartx.onSeeked"),
    $onSeeking: dartx.onSeeking = Symbol("dartx.onSeeking"),
    $onSelect: dartx.onSelect = Symbol("dartx.onSelect"),
    $onSelectStart: dartx.onSelectStart = Symbol("dartx.onSelectStart"),
    $onStalled: dartx.onStalled = Symbol("dartx.onStalled"),
    $onSubmit: dartx.onSubmit = Symbol("dartx.onSubmit"),
    $onSuspend: dartx.onSuspend = Symbol("dartx.onSuspend"),
    $onTimeUpdate: dartx.onTimeUpdate = Symbol("dartx.onTimeUpdate"),
    $onTouchCancel: dartx.onTouchCancel = Symbol("dartx.onTouchCancel"),
    $onTouchEnd: dartx.onTouchEnd = Symbol("dartx.onTouchEnd"),
    $onTouchEnter: dartx.onTouchEnter = Symbol("dartx.onTouchEnter"),
    $onTouchLeave: dartx.onTouchLeave = Symbol("dartx.onTouchLeave")
  };
  var S$ = {
    $onTouchMove: dartx.onTouchMove = Symbol("dartx.onTouchMove"),
    $onTouchStart: dartx.onTouchStart = Symbol("dartx.onTouchStart"),
    $onTransitionEnd: dartx.onTransitionEnd = Symbol("dartx.onTransitionEnd"),
    $onVolumeChange: dartx.onVolumeChange = Symbol("dartx.onVolumeChange"),
    $onWaiting: dartx.onWaiting = Symbol("dartx.onWaiting"),
    $onFullscreenChange: dartx.onFullscreenChange = Symbol("dartx.onFullscreenChange"),
    $onFullscreenError: dartx.onFullscreenError = Symbol("dartx.onFullscreenError"),
    $onWheel: dartx.onWheel = Symbol("dartx.onWheel"),
    _removeChild: dart.privateName(html$, "_removeChild"),
    _replaceChild: dart.privateName(html$, "_replaceChild"),
    $replaceWith: dartx.replaceWith = Symbol("dartx.replaceWith"),
    _this: dart.privateName(html$, "_this"),
    $insertAllBefore: dartx.insertAllBefore = Symbol("dartx.insertAllBefore"),
    _clearChildren: dart.privateName(html$, "_clearChildren"),
    $childNodes: dartx.childNodes = Symbol("dartx.childNodes"),
    $firstChild: dartx.firstChild = Symbol("dartx.firstChild"),
    $isConnected: dartx.isConnected = Symbol("dartx.isConnected"),
    $lastChild: dartx.lastChild = Symbol("dartx.lastChild"),
    $nodeName: dartx.nodeName = Symbol("dartx.nodeName"),
    $nodeType: dartx.nodeType = Symbol("dartx.nodeType"),
    $nodeValue: dartx.nodeValue = Symbol("dartx.nodeValue"),
    $ownerDocument: dartx.ownerDocument = Symbol("dartx.ownerDocument"),
    $parentNode: dartx.parentNode = Symbol("dartx.parentNode"),
    $previousNode: dartx.previousNode = Symbol("dartx.previousNode"),
    $clone: dartx.clone = Symbol("dartx.clone"),
    _getRootNode_1: dart.privateName(html$, "_getRootNode_1"),
    _getRootNode_2: dart.privateName(html$, "_getRootNode_2"),
    $getRootNode: dartx.getRootNode = Symbol("dartx.getRootNode"),
    $hasChildNodes: dartx.hasChildNodes = Symbol("dartx.hasChildNodes"),
    $insertBefore: dartx.insertBefore = Symbol("dartx.insertBefore"),
    _CustomEventStreamProvider__eventTypeGetter: dart.privateName(html$, "_CustomEventStreamProvider._eventTypeGetter"),
    $respondWith: dartx.respondWith = Symbol("dartx.respondWith"),
    $waitUntil: dartx.waitUntil = Symbol("dartx.waitUntil"),
    $quaternion: dartx.quaternion = Symbol("dartx.quaternion"),
    $populateMatrix: dartx.populateMatrix = Symbol("dartx.populateMatrix"),
    $activated: dartx.activated = Symbol("dartx.activated"),
    $hasReading: dartx.hasReading = Symbol("dartx.hasReading"),
    $timestamp: dartx.timestamp = Symbol("dartx.timestamp"),
    $start: dartx.start = Symbol("dartx.start"),
    $stop: dartx.stop = Symbol("dartx.stop"),
    $x: dartx.x = Symbol("dartx.x"),
    $y: dartx.y = Symbol("dartx.y"),
    $z: dartx.z = Symbol("dartx.z"),
    $activeDescendant: dartx.activeDescendant = Symbol("dartx.activeDescendant"),
    $atomic: dartx.atomic = Symbol("dartx.atomic"),
    $autocomplete: dartx.autocomplete = Symbol("dartx.autocomplete"),
    $busy: dartx.busy = Symbol("dartx.busy"),
    $checked: dartx.checked = Symbol("dartx.checked"),
    $colCount: dartx.colCount = Symbol("dartx.colCount"),
    $colIndex: dartx.colIndex = Symbol("dartx.colIndex"),
    $colSpan: dartx.colSpan = Symbol("dartx.colSpan"),
    $controls: dartx.controls = Symbol("dartx.controls"),
    $current: dartx.current = Symbol("dartx.current"),
    $describedBy: dartx.describedBy = Symbol("dartx.describedBy"),
    $details: dartx.details = Symbol("dartx.details"),
    $disabled: dartx.disabled = Symbol("dartx.disabled"),
    $errorMessage: dartx.errorMessage = Symbol("dartx.errorMessage"),
    $expanded: dartx.expanded = Symbol("dartx.expanded"),
    $flowTo: dartx.flowTo = Symbol("dartx.flowTo"),
    $hasPopUp: dartx.hasPopUp = Symbol("dartx.hasPopUp"),
    $invalid: dartx.invalid = Symbol("dartx.invalid"),
    $keyShortcuts: dartx.keyShortcuts = Symbol("dartx.keyShortcuts"),
    $label: dartx.label = Symbol("dartx.label"),
    $labeledBy: dartx.labeledBy = Symbol("dartx.labeledBy"),
    $level: dartx.level = Symbol("dartx.level"),
    $live: dartx.live = Symbol("dartx.live"),
    $modal: dartx.modal = Symbol("dartx.modal"),
    $multiline: dartx.multiline = Symbol("dartx.multiline"),
    $multiselectable: dartx.multiselectable = Symbol("dartx.multiselectable"),
    $orientation: dartx.orientation = Symbol("dartx.orientation"),
    $owns: dartx.owns = Symbol("dartx.owns"),
    $placeholder: dartx.placeholder = Symbol("dartx.placeholder"),
    $posInSet: dartx.posInSet = Symbol("dartx.posInSet"),
    $pressed: dartx.pressed = Symbol("dartx.pressed"),
    $readOnly: dartx.readOnly = Symbol("dartx.readOnly"),
    $relevant: dartx.relevant = Symbol("dartx.relevant"),
    $required: dartx.required = Symbol("dartx.required"),
    $role: dartx.role = Symbol("dartx.role"),
    $roleDescription: dartx.roleDescription = Symbol("dartx.roleDescription"),
    $rowCount: dartx.rowCount = Symbol("dartx.rowCount"),
    $rowIndex: dartx.rowIndex = Symbol("dartx.rowIndex"),
    $rowSpan: dartx.rowSpan = Symbol("dartx.rowSpan"),
    $selected: dartx.selected = Symbol("dartx.selected"),
    $setSize: dartx.setSize = Symbol("dartx.setSize"),
    $valueMax: dartx.valueMax = Symbol("dartx.valueMax"),
    $valueMin: dartx.valueMin = Symbol("dartx.valueMin"),
    $valueNow: dartx.valueNow = Symbol("dartx.valueNow"),
    $valueText: dartx.valueText = Symbol("dartx.valueText"),
    $appendChild: dartx.appendChild = Symbol("dartx.appendChild"),
    $onAccessibleClick: dartx.onAccessibleClick = Symbol("dartx.onAccessibleClick"),
    $onAccessibleContextMenu: dartx.onAccessibleContextMenu = Symbol("dartx.onAccessibleContextMenu"),
    $onAccessibleDecrement: dartx.onAccessibleDecrement = Symbol("dartx.onAccessibleDecrement"),
    $onAccessibleFocus: dartx.onAccessibleFocus = Symbol("dartx.onAccessibleFocus"),
    $onAccessibleIncrement: dartx.onAccessibleIncrement = Symbol("dartx.onAccessibleIncrement"),
    $onAccessibleScrollIntoView: dartx.onAccessibleScrollIntoView = Symbol("dartx.onAccessibleScrollIntoView"),
    __setter__: dart.privateName(html$, "__setter__"),
    $item: dartx.item = Symbol("dartx.item"),
    $illuminance: dartx.illuminance = Symbol("dartx.illuminance"),
    $download: dartx.download = Symbol("dartx.download"),
    $hreflang: dartx.hreflang = Symbol("dartx.hreflang"),
    $referrerPolicy: dartx.referrerPolicy = Symbol("dartx.referrerPolicy"),
    $rel: dartx.rel = Symbol("dartx.rel"),
    $hash: dartx.hash = Symbol("dartx.hash"),
    $host: dartx.host = Symbol("dartx.host"),
    $hostname: dartx.hostname = Symbol("dartx.hostname"),
    $href: dartx.href = Symbol("dartx.href"),
    $origin: dartx.origin = Symbol("dartx.origin"),
    $password: dartx.password = Symbol("dartx.password"),
    $pathname: dartx.pathname = Symbol("dartx.pathname"),
    $port: dartx.port = Symbol("dartx.port"),
    $protocol: dartx.protocol = Symbol("dartx.protocol"),
    $search: dartx.search = Symbol("dartx.search"),
    $username: dartx.username = Symbol("dartx.username"),
    $currentTime: dartx.currentTime = Symbol("dartx.currentTime"),
    $effect: dartx.effect = Symbol("dartx.effect"),
    $finished: dartx.finished = Symbol("dartx.finished"),
    $playState: dartx.playState = Symbol("dartx.playState"),
    $playbackRate: dartx.playbackRate = Symbol("dartx.playbackRate"),
    $ready: dartx.ready = Symbol("dartx.ready"),
    $startTime: dartx.startTime = Symbol("dartx.startTime"),
    $timeline: dartx.timeline = Symbol("dartx.timeline"),
    $cancel: dartx.cancel = Symbol("dartx.cancel"),
    $finish: dartx.finish = Symbol("dartx.finish"),
    $pause: dartx.pause = Symbol("dartx.pause"),
    $play: dartx.play = Symbol("dartx.play"),
    $reverse: dartx.reverse = Symbol("dartx.reverse"),
    $onCancel: dartx.onCancel = Symbol("dartx.onCancel"),
    $onFinish: dartx.onFinish = Symbol("dartx.onFinish"),
    $timing: dartx.timing = Symbol("dartx.timing"),
    _getComputedTiming_1: dart.privateName(html$, "_getComputedTiming_1"),
    $getComputedTiming: dartx.getComputedTiming = Symbol("dartx.getComputedTiming"),
    $delay: dartx.delay = Symbol("dartx.delay"),
    $duration: dartx.duration = Symbol("dartx.duration"),
    $easing: dartx.easing = Symbol("dartx.easing"),
    $endDelay: dartx.endDelay = Symbol("dartx.endDelay"),
    $fill: dartx.fill = Symbol("dartx.fill"),
    $iterationStart: dartx.iterationStart = Symbol("dartx.iterationStart"),
    $iterations: dartx.iterations = Symbol("dartx.iterations"),
    $animationName: dartx.animationName = Symbol("dartx.animationName"),
    $elapsedTime: dartx.elapsedTime = Symbol("dartx.elapsedTime"),
    $timelineTime: dartx.timelineTime = Symbol("dartx.timelineTime"),
    $registerAnimator: dartx.registerAnimator = Symbol("dartx.registerAnimator"),
    $status: dartx.status = Symbol("dartx.status"),
    $swapCache: dartx.swapCache = Symbol("dartx.swapCache"),
    $onCached: dartx.onCached = Symbol("dartx.onCached"),
    $onChecking: dartx.onChecking = Symbol("dartx.onChecking"),
    $onDownloading: dartx.onDownloading = Symbol("dartx.onDownloading"),
    $onNoUpdate: dartx.onNoUpdate = Symbol("dartx.onNoUpdate"),
    $onObsolete: dartx.onObsolete = Symbol("dartx.onObsolete"),
    $onProgress: dartx.onProgress = Symbol("dartx.onProgress"),
    $onUpdateReady: dartx.onUpdateReady = Symbol("dartx.onUpdateReady"),
    $reason: dartx.reason = Symbol("dartx.reason"),
    $url: dartx.url = Symbol("dartx.url"),
    $alt: dartx.alt = Symbol("dartx.alt"),
    $coords: dartx.coords = Symbol("dartx.coords"),
    $shape: dartx.shape = Symbol("dartx.shape"),
    $audioTracks: dartx.audioTracks = Symbol("dartx.audioTracks"),
    $autoplay: dartx.autoplay = Symbol("dartx.autoplay"),
    $buffered: dartx.buffered = Symbol("dartx.buffered"),
    $controlsList: dartx.controlsList = Symbol("dartx.controlsList"),
    $crossOrigin: dartx.crossOrigin = Symbol("dartx.crossOrigin"),
    $currentSrc: dartx.currentSrc = Symbol("dartx.currentSrc"),
    $defaultMuted: dartx.defaultMuted = Symbol("dartx.defaultMuted"),
    $defaultPlaybackRate: dartx.defaultPlaybackRate = Symbol("dartx.defaultPlaybackRate"),
    $disableRemotePlayback: dartx.disableRemotePlayback = Symbol("dartx.disableRemotePlayback"),
    $ended: dartx.ended = Symbol("dartx.ended"),
    $loop: dartx.loop = Symbol("dartx.loop"),
    $mediaKeys: dartx.mediaKeys = Symbol("dartx.mediaKeys"),
    $muted: dartx.muted = Symbol("dartx.muted"),
    $networkState: dartx.networkState = Symbol("dartx.networkState"),
    $paused: dartx.paused = Symbol("dartx.paused"),
    $played: dartx.played = Symbol("dartx.played"),
    $preload: dartx.preload = Symbol("dartx.preload"),
    $remote: dartx.remote = Symbol("dartx.remote"),
    $seekable: dartx.seekable = Symbol("dartx.seekable"),
    $seeking: dartx.seeking = Symbol("dartx.seeking"),
    $sinkId: dartx.sinkId = Symbol("dartx.sinkId"),
    $src: dartx.src = Symbol("dartx.src"),
    $srcObject: dartx.srcObject = Symbol("dartx.srcObject"),
    $textTracks: dartx.textTracks = Symbol("dartx.textTracks"),
    $videoTracks: dartx.videoTracks = Symbol("dartx.videoTracks"),
    $volume: dartx.volume = Symbol("dartx.volume"),
    $audioDecodedByteCount: dartx.audioDecodedByteCount = Symbol("dartx.audioDecodedByteCount"),
    $videoDecodedByteCount: dartx.videoDecodedByteCount = Symbol("dartx.videoDecodedByteCount"),
    $addTextTrack: dartx.addTextTrack = Symbol("dartx.addTextTrack"),
    $canPlayType: dartx.canPlayType = Symbol("dartx.canPlayType"),
    $captureStream: dartx.captureStream = Symbol("dartx.captureStream"),
    $load: dartx.load = Symbol("dartx.load"),
    $setMediaKeys: dartx.setMediaKeys = Symbol("dartx.setMediaKeys"),
    $setSinkId: dartx.setSinkId = Symbol("dartx.setSinkId"),
    $authenticatorData: dartx.authenticatorData = Symbol("dartx.authenticatorData"),
    $signature: dartx.signature = Symbol("dartx.signature"),
    $clientDataJson: dartx.clientDataJson = Symbol("dartx.clientDataJson"),
    $attestationObject: dartx.attestationObject = Symbol("dartx.attestationObject"),
    $state: dartx.state = Symbol("dartx.state"),
    $fetches: dartx.fetches = Symbol("dartx.fetches"),
    $request: dartx.request = Symbol("dartx.request"),
    $fetch: dartx.fetch = Symbol("dartx.fetch"),
    $getIds: dartx.getIds = Symbol("dartx.getIds"),
    $downloadTotal: dartx.downloadTotal = Symbol("dartx.downloadTotal"),
    $downloaded: dartx.downloaded = Symbol("dartx.downloaded"),
    $totalDownloadSize: dartx.totalDownloadSize = Symbol("dartx.totalDownloadSize"),
    $uploadTotal: dartx.uploadTotal = Symbol("dartx.uploadTotal"),
    $uploaded: dartx.uploaded = Symbol("dartx.uploaded"),
    $response: dartx.response = Symbol("dartx.response"),
    $updateUI: dartx.updateUI = Symbol("dartx.updateUI"),
    $visible: dartx.visible = Symbol("dartx.visible"),
    $detect: dartx.detect = Symbol("dartx.detect"),
    $charging: dartx.charging = Symbol("dartx.charging"),
    $chargingTime: dartx.chargingTime = Symbol("dartx.chargingTime"),
    $dischargingTime: dartx.dischargingTime = Symbol("dartx.dischargingTime"),
    $platforms: dartx.platforms = Symbol("dartx.platforms"),
    $userChoice: dartx.userChoice = Symbol("dartx.userChoice"),
    $prompt: dartx.prompt = Symbol("dartx.prompt"),
    $returnValue: dartx.returnValue = Symbol("dartx.returnValue"),
    $size: dartx.size = Symbol("dartx.size"),
    $slice: dartx.slice = Symbol("dartx.slice"),
    $data: dartx.data = Symbol("dartx.data"),
    $timecode: dartx.timecode = Symbol("dartx.timecode"),
    $characteristic: dartx.characteristic = Symbol("dartx.characteristic"),
    $uuid: dartx.uuid = Symbol("dartx.uuid"),
    $readValue: dartx.readValue = Symbol("dartx.readValue"),
    $writeValue: dartx.writeValue = Symbol("dartx.writeValue"),
    $bodyUsed: dartx.bodyUsed = Symbol("dartx.bodyUsed"),
    $arrayBuffer: dartx.arrayBuffer = Symbol("dartx.arrayBuffer"),
    $blob: dartx.blob = Symbol("dartx.blob"),
    $formData: dartx.formData = Symbol("dartx.formData"),
    $json: dartx.json = Symbol("dartx.json"),
    $onHashChange: dartx.onHashChange = Symbol("dartx.onHashChange"),
    $onMessage: dartx.onMessage = Symbol("dartx.onMessage"),
    $onOffline: dartx.onOffline = Symbol("dartx.onOffline"),
    $onOnline: dartx.onOnline = Symbol("dartx.onOnline"),
    $onPopState: dartx.onPopState = Symbol("dartx.onPopState"),
    $onStorage: dartx.onStorage = Symbol("dartx.onStorage"),
    $onUnload: dartx.onUnload = Symbol("dartx.onUnload"),
    $postMessage: dartx.postMessage = Symbol("dartx.postMessage"),
    $budgetAt: dartx.budgetAt = Symbol("dartx.budgetAt"),
    $time: dartx.time = Symbol("dartx.time"),
    $autofocus: dartx.autofocus = Symbol("dartx.autofocus"),
    $form: dartx.form = Symbol("dartx.form"),
    $formAction: dartx.formAction = Symbol("dartx.formAction"),
    $formEnctype: dartx.formEnctype = Symbol("dartx.formEnctype"),
    $formMethod: dartx.formMethod = Symbol("dartx.formMethod"),
    $formNoValidate: dartx.formNoValidate = Symbol("dartx.formNoValidate"),
    $formTarget: dartx.formTarget = Symbol("dartx.formTarget"),
    $labels: dartx.labels = Symbol("dartx.labels"),
    $validationMessage: dartx.validationMessage = Symbol("dartx.validationMessage"),
    $validity: dartx.validity = Symbol("dartx.validity"),
    $willValidate: dartx.willValidate = Symbol("dartx.willValidate"),
    $checkValidity: dartx.checkValidity = Symbol("dartx.checkValidity"),
    $reportValidity: dartx.reportValidity = Symbol("dartx.reportValidity"),
    $setCustomValidity: dartx.setCustomValidity = Symbol("dartx.setCustomValidity"),
    $wholeText: dartx.wholeText = Symbol("dartx.wholeText"),
    $splitText: dartx.splitText = Symbol("dartx.splitText"),
    $appendData: dartx.appendData = Symbol("dartx.appendData"),
    $deleteData: dartx.deleteData = Symbol("dartx.deleteData"),
    $insertData: dartx.insertData = Symbol("dartx.insertData"),
    $replaceData: dartx.replaceData = Symbol("dartx.replaceData"),
    $substringData: dartx.substringData = Symbol("dartx.substringData"),
    $has: dartx.has = Symbol("dartx.has"),
    $match: dartx.match = Symbol("dartx.match"),
    $methodData: dartx.methodData = Symbol("dartx.methodData"),
    $modifiers: dartx.modifiers = Symbol("dartx.modifiers"),
    $paymentRequestOrigin: dartx.paymentRequestOrigin = Symbol("dartx.paymentRequestOrigin"),
    $topLevelOrigin: dartx.topLevelOrigin = Symbol("dartx.topLevelOrigin"),
    $canvas: dartx.canvas = Symbol("dartx.canvas"),
    $requestFrame: dartx.requestFrame = Symbol("dartx.requestFrame"),
    $contentHint: dartx.contentHint = Symbol("dartx.contentHint"),
    $enabled: dartx.enabled = Symbol("dartx.enabled"),
    $kind: dartx.kind = Symbol("dartx.kind"),
    $applyConstraints: dartx.applyConstraints = Symbol("dartx.applyConstraints"),
    _getCapabilities_1: dart.privateName(html$, "_getCapabilities_1"),
    $getCapabilities: dartx.getCapabilities = Symbol("dartx.getCapabilities"),
    _getConstraints_1: dart.privateName(html$, "_getConstraints_1"),
    $getConstraints: dartx.getConstraints = Symbol("dartx.getConstraints"),
    _getSettings_1: dart.privateName(html$, "_getSettings_1"),
    $getSettings: dartx.getSettings = Symbol("dartx.getSettings"),
    $onMute: dartx.onMute = Symbol("dartx.onMute"),
    $onUnmute: dartx.onUnmute = Symbol("dartx.onUnmute"),
    _getContext_1: dart.privateName(html$, "_getContext_1"),
    _getContext_2: dart.privateName(html$, "_getContext_2"),
    $getContext: dartx.getContext = Symbol("dartx.getContext"),
    _toDataUrl: dart.privateName(html$, "_toDataUrl"),
    $transferControlToOffscreen: dartx.transferControlToOffscreen = Symbol("dartx.transferControlToOffscreen"),
    $onWebGlContextLost: dartx.onWebGlContextLost = Symbol("dartx.onWebGlContextLost"),
    $onWebGlContextRestored: dartx.onWebGlContextRestored = Symbol("dartx.onWebGlContextRestored"),
    $context2D: dartx.context2D = Symbol("dartx.context2D"),
    $getContext3d: dartx.getContext3d = Symbol("dartx.getContext3d"),
    $toDataUrl: dartx.toDataUrl = Symbol("dartx.toDataUrl"),
    _toBlob: dart.privateName(html$, "_toBlob"),
    $toBlob: dartx.toBlob = Symbol("dartx.toBlob"),
    $addColorStop: dartx.addColorStop = Symbol("dartx.addColorStop"),
    $setTransform: dartx.setTransform = Symbol("dartx.setTransform"),
    $currentTransform: dartx.currentTransform = Symbol("dartx.currentTransform"),
    $fillStyle: dartx.fillStyle = Symbol("dartx.fillStyle"),
    $filter: dartx.filter = Symbol("dartx.filter"),
    $font: dartx.font = Symbol("dartx.font"),
    $globalAlpha: dartx.globalAlpha = Symbol("dartx.globalAlpha"),
    $globalCompositeOperation: dartx.globalCompositeOperation = Symbol("dartx.globalCompositeOperation"),
    $imageSmoothingEnabled: dartx.imageSmoothingEnabled = Symbol("dartx.imageSmoothingEnabled"),
    $imageSmoothingQuality: dartx.imageSmoothingQuality = Symbol("dartx.imageSmoothingQuality"),
    $lineCap: dartx.lineCap = Symbol("dartx.lineCap"),
    $lineJoin: dartx.lineJoin = Symbol("dartx.lineJoin"),
    $lineWidth: dartx.lineWidth = Symbol("dartx.lineWidth"),
    $miterLimit: dartx.miterLimit = Symbol("dartx.miterLimit"),
    $shadowBlur: dartx.shadowBlur = Symbol("dartx.shadowBlur"),
    $shadowColor: dartx.shadowColor = Symbol("dartx.shadowColor"),
    $shadowOffsetX: dartx.shadowOffsetX = Symbol("dartx.shadowOffsetX"),
    $shadowOffsetY: dartx.shadowOffsetY = Symbol("dartx.shadowOffsetY"),
    $strokeStyle: dartx.strokeStyle = Symbol("dartx.strokeStyle"),
    $textAlign: dartx.textAlign = Symbol("dartx.textAlign"),
    $textBaseline: dartx.textBaseline = Symbol("dartx.textBaseline"),
    _addHitRegion_1: dart.privateName(html$, "_addHitRegion_1"),
    _addHitRegion_2: dart.privateName(html$, "_addHitRegion_2"),
    $addHitRegion: dartx.addHitRegion = Symbol("dartx.addHitRegion"),
    $beginPath: dartx.beginPath = Symbol("dartx.beginPath"),
    $clearHitRegions: dartx.clearHitRegions = Symbol("dartx.clearHitRegions"),
    $clearRect: dartx.clearRect = Symbol("dartx.clearRect"),
    $clip: dartx.clip = Symbol("dartx.clip"),
    _createImageData_1: dart.privateName(html$, "_createImageData_1"),
    _createImageData_2: dart.privateName(html$, "_createImageData_2"),
    _createImageData_3: dart.privateName(html$, "_createImageData_3"),
    _createImageData_4: dart.privateName(html$, "_createImageData_4"),
    _createImageData_5: dart.privateName(html$, "_createImageData_5"),
    $createImageData: dartx.createImageData = Symbol("dartx.createImageData"),
    $createLinearGradient: dartx.createLinearGradient = Symbol("dartx.createLinearGradient"),
    $createPattern: dartx.createPattern = Symbol("dartx.createPattern"),
    $createRadialGradient: dartx.createRadialGradient = Symbol("dartx.createRadialGradient"),
    $drawFocusIfNeeded: dartx.drawFocusIfNeeded = Symbol("dartx.drawFocusIfNeeded"),
    $fillRect: dartx.fillRect = Symbol("dartx.fillRect"),
    _getContextAttributes_1: dart.privateName(html$, "_getContextAttributes_1"),
    $getContextAttributes: dartx.getContextAttributes = Symbol("dartx.getContextAttributes"),
    _getImageData_1: dart.privateName(html$, "_getImageData_1"),
    $getImageData: dartx.getImageData = Symbol("dartx.getImageData"),
    _getLineDash: dart.privateName(html$, "_getLineDash"),
    $isContextLost: dartx.isContextLost = Symbol("dartx.isContextLost"),
    $isPointInPath: dartx.isPointInPath = Symbol("dartx.isPointInPath"),
    $isPointInStroke: dartx.isPointInStroke = Symbol("dartx.isPointInStroke"),
    $measureText: dartx.measureText = Symbol("dartx.measureText"),
    _putImageData_1: dart.privateName(html$, "_putImageData_1"),
    _putImageData_2: dart.privateName(html$, "_putImageData_2"),
    $putImageData: dartx.putImageData = Symbol("dartx.putImageData"),
    $removeHitRegion: dartx.removeHitRegion = Symbol("dartx.removeHitRegion"),
    $resetTransform: dartx.resetTransform = Symbol("dartx.resetTransform"),
    $restore: dartx.restore = Symbol("dartx.restore"),
    $rotate: dartx.rotate = Symbol("dartx.rotate"),
    $save: dartx.save = Symbol("dartx.save"),
    $scale: dartx.scale = Symbol("dartx.scale"),
    $scrollPathIntoView: dartx.scrollPathIntoView = Symbol("dartx.scrollPathIntoView"),
    $stroke: dartx.stroke = Symbol("dartx.stroke"),
    $strokeRect: dartx.strokeRect = Symbol("dartx.strokeRect"),
    $strokeText: dartx.strokeText = Symbol("dartx.strokeText"),
    $transform: dartx.transform = Symbol("dartx.transform"),
    _arc: dart.privateName(html$, "_arc"),
    $arcTo: dartx.arcTo = Symbol("dartx.arcTo"),
    $bezierCurveTo: dartx.bezierCurveTo = Symbol("dartx.bezierCurveTo"),
    $closePath: dartx.closePath = Symbol("dartx.closePath"),
    $ellipse: dartx.ellipse = Symbol("dartx.ellipse"),
    $lineTo: dartx.lineTo = Symbol("dartx.lineTo"),
    $moveTo: dartx.moveTo = Symbol("dartx.moveTo"),
    $quadraticCurveTo: dartx.quadraticCurveTo = Symbol("dartx.quadraticCurveTo"),
    $rect: dartx.rect = Symbol("dartx.rect"),
    $createImageDataFromImageData: dartx.createImageDataFromImageData = Symbol("dartx.createImageDataFromImageData"),
    $setFillColorRgb: dartx.setFillColorRgb = Symbol("dartx.setFillColorRgb"),
    $setFillColorHsl: dartx.setFillColorHsl = Symbol("dartx.setFillColorHsl"),
    $setStrokeColorRgb: dartx.setStrokeColorRgb = Symbol("dartx.setStrokeColorRgb"),
    $setStrokeColorHsl: dartx.setStrokeColorHsl = Symbol("dartx.setStrokeColorHsl"),
    $arc: dartx.arc = Symbol("dartx.arc"),
    $createPatternFromImage: dartx.createPatternFromImage = Symbol("dartx.createPatternFromImage"),
    $drawImageScaled: dartx.drawImageScaled = Symbol("dartx.drawImageScaled"),
    $drawImageScaledFromSource: dartx.drawImageScaledFromSource = Symbol("dartx.drawImageScaledFromSource"),
    $drawImageToRect: dartx.drawImageToRect = Symbol("dartx.drawImageToRect"),
    $drawImage: dartx.drawImage = Symbol("dartx.drawImage"),
    $lineDashOffset: dartx.lineDashOffset = Symbol("dartx.lineDashOffset"),
    $getLineDash: dartx.getLineDash = Symbol("dartx.getLineDash"),
    $setLineDash: dartx.setLineDash = Symbol("dartx.setLineDash"),
    $fillText: dartx.fillText = Symbol("dartx.fillText"),
    $backingStorePixelRatio: dartx.backingStorePixelRatio = Symbol("dartx.backingStorePixelRatio"),
    $frameType: dartx.frameType = Symbol("dartx.frameType"),
    $claim: dartx.claim = Symbol("dartx.claim"),
    $matchAll: dartx.matchAll = Symbol("dartx.matchAll"),
    $openWindow: dartx.openWindow = Symbol("dartx.openWindow"),
    $clipboardData: dartx.clipboardData = Symbol("dartx.clipboardData"),
    $code: dartx.code = Symbol("dartx.code"),
    $wasClean: dartx.wasClean = Symbol("dartx.wasClean"),
    _initCompositionEvent: dart.privateName(html$, "_initCompositionEvent"),
    _initUIEvent: dart.privateName(html$, "_initUIEvent"),
    $detail: dartx.detail = Symbol("dartx.detail"),
    $sourceCapabilities: dartx.sourceCapabilities = Symbol("dartx.sourceCapabilities"),
    _get_view: dart.privateName(html$, "_get_view"),
    $view: dartx.view = Symbol("dartx.view"),
    _which: dart.privateName(html$, "_which"),
    $select: dartx.select = Symbol("dartx.select"),
    $getDistributedNodes: dartx.getDistributedNodes = Symbol("dartx.getDistributedNodes"),
    $set: dartx.set = Symbol("dartx.set"),
    $accuracy: dartx.accuracy = Symbol("dartx.accuracy"),
    $altitude: dartx.altitude = Symbol("dartx.altitude"),
    $altitudeAccuracy: dartx.altitudeAccuracy = Symbol("dartx.altitudeAccuracy"),
    $heading: dartx.heading = Symbol("dartx.heading"),
    $latitude: dartx.latitude = Symbol("dartx.latitude"),
    $longitude: dartx.longitude = Symbol("dartx.longitude"),
    $speed: dartx.speed = Symbol("dartx.speed"),
    $iconUrl: dartx.iconUrl = Symbol("dartx.iconUrl"),
    $create: dartx.create = Symbol("dartx.create"),
    $preventSilentAccess: dartx.preventSilentAccess = Symbol("dartx.preventSilentAccess"),
    $requireUserMediation: dartx.requireUserMediation = Symbol("dartx.requireUserMediation"),
    $store: dartx.store = Symbol("dartx.store"),
    _getRandomValues: dart.privateName(html$, "_getRandomValues"),
    $getRandomValues: dartx.getRandomValues = Symbol("dartx.getRandomValues"),
    $subtle: dartx.subtle = Symbol("dartx.subtle"),
    $algorithm: dartx.algorithm = Symbol("dartx.algorithm"),
    $extractable: dartx.extractable = Symbol("dartx.extractable"),
    $usages: dartx.usages = Symbol("dartx.usages"),
    $encoding: dartx.encoding = Symbol("dartx.encoding"),
    $cssText: dartx.cssText = Symbol("dartx.cssText"),
    $parentRule: dartx.parentRule = Symbol("dartx.parentRule"),
    $parentStyleSheet: dartx.parentStyleSheet = Symbol("dartx.parentStyleSheet"),
    $conditionText: dartx.conditionText = Symbol("dartx.conditionText"),
    $cssRules: dartx.cssRules = Symbol("dartx.cssRules"),
    $deleteRule: dartx.deleteRule = Symbol("dartx.deleteRule"),
    $insertRule: dartx.insertRule = Symbol("dartx.insertRule"),
    $intrinsicHeight: dartx.intrinsicHeight = Symbol("dartx.intrinsicHeight"),
    $intrinsicRatio: dartx.intrinsicRatio = Symbol("dartx.intrinsicRatio"),
    $intrinsicWidth: dartx.intrinsicWidth = Symbol("dartx.intrinsicWidth"),
    $media: dartx.media = Symbol("dartx.media"),
    $styleSheet: dartx.styleSheet = Symbol("dartx.styleSheet"),
    $keyText: dartx.keyText = Symbol("dartx.keyText"),
    __getter__: dart.privateName(html$, "__getter__"),
    $appendRule: dartx.appendRule = Symbol("dartx.appendRule"),
    $findRule: dartx.findRule = Symbol("dartx.findRule"),
    $matrix: dartx.matrix = Symbol("dartx.matrix"),
    $is2D: dartx.is2D = Symbol("dartx.is2D"),
    $prefix: dartx.prefix = Symbol("dartx.prefix"),
    $div: dartx.div = Symbol("dartx.div"),
    $mul: dartx.mul = Symbol("dartx.mul"),
    $sub: dartx.sub = Symbol("dartx.sub"),
    $to: dartx.to = Symbol("dartx.to"),
    $selectorText: dartx.selectorText = Symbol("dartx.selectorText"),
    $angle: dartx.angle = Symbol("dartx.angle"),
    $ax: dartx.ax = Symbol("dartx.ax"),
    $ay: dartx.ay = Symbol("dartx.ay"),
    _getPropertyValueHelper: dart.privateName(html$, "_getPropertyValueHelper"),
    $getPropertyValue: dartx.getPropertyValue = Symbol("dartx.getPropertyValue"),
    _browserPropertyName: dart.privateName(html$, "_browserPropertyName"),
    _getPropertyValue: dart.privateName(html$, "_getPropertyValue"),
    _supportsProperty: dart.privateName(html$, "_supportsProperty"),
    $supportsProperty: dartx.supportsProperty = Symbol("dartx.supportsProperty"),
    _setPropertyHelper: dart.privateName(html$, "_setPropertyHelper"),
    $setProperty: dartx.setProperty = Symbol("dartx.setProperty"),
    _supportedBrowserPropertyName: dart.privateName(html$, "_supportedBrowserPropertyName"),
    $cssFloat: dartx.cssFloat = Symbol("dartx.cssFloat"),
    $getPropertyPriority: dartx.getPropertyPriority = Symbol("dartx.getPropertyPriority"),
    $removeProperty: dartx.removeProperty = Symbol("dartx.removeProperty"),
    _background: dart.privateName(html$, "_background"),
    $background: dartx.background = Symbol("dartx.background"),
    _backgroundAttachment: dart.privateName(html$, "_backgroundAttachment"),
    $backgroundAttachment: dartx.backgroundAttachment = Symbol("dartx.backgroundAttachment"),
    _backgroundColor: dart.privateName(html$, "_backgroundColor"),
    $backgroundColor: dartx.backgroundColor = Symbol("dartx.backgroundColor"),
    _backgroundImage: dart.privateName(html$, "_backgroundImage"),
    $backgroundImage: dartx.backgroundImage = Symbol("dartx.backgroundImage"),
    _backgroundPosition: dart.privateName(html$, "_backgroundPosition"),
    $backgroundPosition: dartx.backgroundPosition = Symbol("dartx.backgroundPosition"),
    _backgroundRepeat: dart.privateName(html$, "_backgroundRepeat"),
    $backgroundRepeat: dartx.backgroundRepeat = Symbol("dartx.backgroundRepeat"),
    _border: dart.privateName(html$, "_border"),
    $border: dartx.border = Symbol("dartx.border"),
    _borderBottom: dart.privateName(html$, "_borderBottom"),
    $borderBottom: dartx.borderBottom = Symbol("dartx.borderBottom"),
    _borderBottomColor: dart.privateName(html$, "_borderBottomColor"),
    $borderBottomColor: dartx.borderBottomColor = Symbol("dartx.borderBottomColor"),
    _borderBottomStyle: dart.privateName(html$, "_borderBottomStyle"),
    $borderBottomStyle: dartx.borderBottomStyle = Symbol("dartx.borderBottomStyle"),
    _borderBottomWidth: dart.privateName(html$, "_borderBottomWidth"),
    $borderBottomWidth: dartx.borderBottomWidth = Symbol("dartx.borderBottomWidth"),
    _borderCollapse: dart.privateName(html$, "_borderCollapse"),
    $borderCollapse: dartx.borderCollapse = Symbol("dartx.borderCollapse"),
    _borderColor: dart.privateName(html$, "_borderColor"),
    $borderColor: dartx.borderColor = Symbol("dartx.borderColor"),
    _borderLeft: dart.privateName(html$, "_borderLeft"),
    $borderLeft: dartx.borderLeft = Symbol("dartx.borderLeft"),
    _borderLeftColor: dart.privateName(html$, "_borderLeftColor"),
    $borderLeftColor: dartx.borderLeftColor = Symbol("dartx.borderLeftColor"),
    _borderLeftStyle: dart.privateName(html$, "_borderLeftStyle"),
    $borderLeftStyle: dartx.borderLeftStyle = Symbol("dartx.borderLeftStyle"),
    _borderLeftWidth: dart.privateName(html$, "_borderLeftWidth"),
    $borderLeftWidth: dartx.borderLeftWidth = Symbol("dartx.borderLeftWidth"),
    _borderRight: dart.privateName(html$, "_borderRight"),
    $borderRight: dartx.borderRight = Symbol("dartx.borderRight"),
    _borderRightColor: dart.privateName(html$, "_borderRightColor"),
    $borderRightColor: dartx.borderRightColor = Symbol("dartx.borderRightColor"),
    _borderRightStyle: dart.privateName(ht